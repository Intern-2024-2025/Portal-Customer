{
	"info": {
		"_postman_id": "a3a68e47-4b7b-4931-bcf5-fe62e13947e0",
		"name": "Sandhiguna API 1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9252935",
		"_collection_link": "https://dark-meteor-968408.postman.co/workspace/API-Sandhiguna~e7488aa2-af22-407d-b5f3-31fec141b416/collection/9252935-a3a68e47-4b7b-4931-bcf5-fe62e13947e0?action=share&source=collection_link&creator=9252935"
	},
	"item": [
		{
			"name": "v1.0",
			"item": [
				{
					"name": "agent",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    bodyData = JSON.parse(responseBody)\r",
											"    tokenValue = bodyData.result.sessionToken;\r",
											"    pm.collectionVariables.set(\"session_token\", tokenValue);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "2500",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"slotId\": 2,\r\n    \"password\": \"#Sandhiguna1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/agent/login",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"agent",
										"login"
									],
									"query": [
										{
											"key": "slotId",
											"value": "1",
											"disabled": true
										},
										{
											"key": "",
											"value": "1",
											"disabled": true
										},
										{
											"key": "password",
											"value": "kamukamu",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    bodyData = JSON.parse(responseBody)",
											"    tokenValue = bodyData.result.sessionToken;",
											"    pm.collectionVariables.set(\"session_token\", tokenValue);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"slotId\": {{slot_id}},\n    \"sessionToken\": \"{{session_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/agent/refreshSession",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"agent",
										"refreshSession"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "External API",
					"item": [
						{
							"name": "KeyGenerate",
							"item": [
								{
									"name": "Keypair",
									"item": [
										{
											"name": "Keypair Generate RSA 2048",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    privateKeyPair = bodyData.result.wrappedPrivateKey;",
															"    publicKeyPair = bodyData.result.publicKeyOrCert;",
															"    test = publicKeyPair.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\")",
															"    pm.collectionVariables.set(\"private_key_rsa2048\", privateKeyPair);",
															"    pm.collectionVariables.set(\"public_key_rsa2048\", test);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"RSA\",\n    \"algoLength\": 2048,\n    \"wrappingKeyId\": \"02aes\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/keypair/generate",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"keypair",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Keypair Generate RSA 3072",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    privateKeyPair = bodyData.result.wrappedPrivateKey;",
															"    publicKeyPair = bodyData.result.publicKeyOrCert;",
															"    test = publicKeyPair.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\")",
															"    pm.collectionVariables.set(\"private_key_rsa3072\", privateKeyPair);",
															"    pm.collectionVariables.set(\"public_key_rsa3072\", test);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"RSA\",\n    \"algoLength\": 3072,\n    \"wrappingKeyId\": \"02aes\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/keypair/generate",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"keypair",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Keypair Generate RSA 4096",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    privateKeyPair = bodyData.result.wrappedPrivateKey;",
															"    publicKeyPair = bodyData.result.publicKeyOrCert;",
															"    test = publicKeyPair.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\")",
															"    pm.collectionVariables.set(\"private_key_rsa4096\", privateKeyPair);",
															"    pm.collectionVariables.set(\"public_key_rsa4096\", test);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"RSA\",\n    \"algoLength\": 4096,\n    \"wrappingKeyId\": \"02aes\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/keypair/generate",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"keypair",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Keypair Generate ECDSA-P256",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    privateKeyPair = bodyData.result.wrappedPrivateKey;",
															"    publicKeyPair = bodyData.result.publicKeyOrCert;",
															"    test = publicKeyPair.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\")",
															"    pm.collectionVariables.set(\"private_key_ecdsa_p256\", privateKeyPair);",
															"    pm.collectionVariables.set(\"public_key_ecdsa_p256\", test);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"ECDSA P-256\",\n    \"wrappingKeyId\": \"02aes\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/keypair/generate",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"keypair",
														"generate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Keypair With Cert",
									"item": [
										{
											"name": "Keypair Generate RSA 2048 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    privateKeyPair = bodyData.result.wrappedPrivateKey;",
															"    publicKeyPair = bodyData.result.publicKeyOrCert;",
															"    test = publicKeyPair.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\")",
															"    pm.collectionVariables.set(\"private_key_rsa2048_with_cert\", privateKeyPair);",
															"    pm.collectionVariables.set(\"public_key_rsa2048_with_cert\", test);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"RSA\",\n    \"algoLength\": 2048,\n    \"wrappingKeyId\": \"02rsa4096\",\n    \"withCert\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/keypair/generate",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"keypair",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Keypair Generate RSA 3072 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    privateKeyPair = bodyData.result.wrappedPrivateKey;",
															"    publicKeyPair = bodyData.result.publicKeyOrCert;",
															"    test = publicKeyPair.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\")",
															"    pm.collectionVariables.set(\"private_key_rsa3072_with_cert\", privateKeyPair);",
															"    pm.collectionVariables.set(\"public_key_rsa3072_with_cert\", test);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"RSA\",\n    \"algoLength\": 3072,\n    \"wrappingKeyId\": \"02rsa4096\",\n    \"withCert\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/keypair/generate",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"keypair",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Keypair Generate RSA 4096 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    privateKeyPair = bodyData.result.wrappedPrivateKey;",
															"    publicKeyPair = bodyData.result.publicKeyOrCert;",
															"    test = publicKeyPair.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\")",
															"    pm.collectionVariables.set(\"private_key_rsa4096_with_cert\", privateKeyPair);",
															"    pm.collectionVariables.set(\"public_key_rsa4096_with_cert\", test);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"RSA\",\n    \"algoLength\": 4096,\n    \"wrappingKeyId\": \"02rsa4096\",\n    \"withCert\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/keypair/generate",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"keypair",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Keypair Generate ECDSA-P256 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    privateKeyPair = bodyData.result.wrappedPrivateKey;",
															"    publicKeyPair = bodyData.result.publicKeyOrCert;",
															"    test = publicKeyPair.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\")",
															"    pm.collectionVariables.set(\"private_key_ecdsa_p256_with_cert\", privateKeyPair);",
															"    pm.collectionVariables.set(\"public_key_ecdsa_p256_with_cert\", test);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"ECDSA P-256\",\n    \"wrappingKeyId\": \"02rsa4096\",\n    \"withCert\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/keypair/generate",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"keypair",
														"generate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Key Generate AES",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    bodyData = JSON.parse(responseBody)",
													"",
													"    privateKey = bodyData.result.wrappedKey;",
													"    pm.collectionVariables.set(\"private_key_aes\", privateKey);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"algo\": \"AES\",\n    \"algoLength\": 256,\n    \"wrappingKeyId\": \"02aes\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/external/key/generate",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"external",
												"key",
												"generate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "External Mac Generate and Verify",
							"item": [
								{
									"name": "CMAC Generate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    bodyData = JSON.parse(responseBody)",
													"    macValue = bodyData.result.mac;",
													"    pm.collectionVariables.set(\"external_mac_result\", JSON.stringify(macValue));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_aes}}\",\n  \"hashAlgo\": \"CMAC\",\n  \"data\": \"Data Generated for CMAC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/external/mac/generate",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"external",
												"mac",
												"generate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CMAC Verify",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_aes}}\",\n  \"hashAlgo\": \"CMAC\",\n  \"data\": \"Data Generated for CMAC\",\n  \"mac\" : {{external_mac_result}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/external/mac/verify",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"external",
												"mac",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "HMAC Generate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    bodyData = JSON.parse(responseBody)",
													"    macValue = bodyData.result.mac;",
													"    pm.collectionVariables.set(\"external_mac_result\", JSON.stringify(macValue));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_aes}}\",\n  \"hashAlgo\": \"HMAC-SHA256\",\n  \"data\": \"Data Generated for HMAC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/external/mac/generate",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"external",
												"mac",
												"generate"
											]
										}
									},
									"response": []
								},
								{
									"name": "HMAC Verify",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_aes}}\",\n  \"hashAlgo\": \"HMAC-SHA256\",\n  \"data\": \"Data Generated for HMAC\",\n  \"mac\" : {{external_mac_result}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/external/mac/verify",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"external",
												"mac",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "GMAC Generation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    bodyData = JSON.parse(responseBody)",
													"    macValue = bodyData.result.mac;",
													"    ivValue = bodyData.result.iv",
													"    pm.collectionVariables.set(\"external_mac_result\", JSON.stringify(macValue));",
													"    pm.collectionVariables.set(\"external_iv_result\", JSON.stringify(ivValue));",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_aes}}\",\n  \"hashAlgo\": \"GMAC-256\",\n  \"data\": \"Data Generated for GMAC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/external/mac/generate",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"external",
												"mac",
												"generate"
											]
										}
									},
									"response": []
								},
								{
									"name": "GMAC Verify",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_aes}}\",\n  \"hashAlgo\": \"GMAC-256\",\n  \"data\": \"Data Generated for GMAC\",\n  \"mac\" : {{external_mac_result}},\n  \"iv\" : {{external_iv_result}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/external/mac/verify",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"external",
												"mac",
												"verify"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "External Encrypt And Decrypt",
							"item": [
								{
									"name": "Symmetric Encryption",
									"item": [
										{
											"name": "External AES Encrypt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
															"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"wrappingKeyId\": \"02aes\",\n    \"wrappedKey\": \"{{private_key_aes}}\",\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This\",\n            \"aad\": \"aad1\"\n        },\n        {\n            \"text\": \"Please Encrypt That\",\n            \"aad\": \"aad2\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External AES Decrypt",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02aes\",",
															"    \"wrappedKey\": \"{{private_key_aes}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"aad\": \"aad1\",",
															"            \"text\": encryptedData0[0],",
															"            \"mac\": encryptedData0[1],",
															"            \"iv\": encryptedData0[2]",
															"        },",
															"        {",
															"            \"aad\": \"aad2\",",
															"            \"text\": encryptedData1[0],",
															"            \"mac\": encryptedData1[1],",
															"            \"iv\": encryptedData1[2]",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This\",\"Please Encrypt That\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Asymmetric Encryption",
									"item": [
										{
											"name": "External Encrypt With RSA 2048",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa2048}}\",\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 2048\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 2048\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 2048",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02aes\",",
															"    \"wrappedKey\": \"{{private_key_rsa2048}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 2048\",\"Please Encrypt That For RSA 2048\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 3072",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa3072}}\",\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 3072\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 3072\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 3072",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02aes\",",
															"    \"wrappedKey\": \"{{private_key_rsa3072}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 3072\",\"Please Encrypt That For RSA 3072\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 4096",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa4096}}\",\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 4096\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 4096\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 4096",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02aes\",",
															"    \"wrappedKey\": \"{{private_key_rsa4096}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 4096\",\"Please Encrypt That For RSA 4096\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 2048 And Session Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
															"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
															"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
															"",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa2048}}\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 2048 And Session Key\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 2048 And Session Key\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 2048 And Session Key",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02aes\",",
															"    \"wrappedKey\": \"{{private_key_rsa2048}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"            \"mac\": encryptedData0[1],",
															"            \"iv\": encryptedData0[2],",
															"            \"wrappedSessionKey\": encryptedData0[3]",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"            \"mac\": encryptedData1[1],",
															"            \"iv\": encryptedData1[2],",
															"            \"wrappedSessionKey\": encryptedData1[3]",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 2048 And Session Key\",\"Please Encrypt That For RSA 2048 And Session Key\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 3072 And Session Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
															"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
															"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
															"",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa3072}}\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 3072 And Session Key\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 3072 And Session Key\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 3072 And Session Key",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02aes\",",
															"    \"wrappedKey\": \"{{private_key_rsa3072}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"            \"mac\": encryptedData0[1],",
															"            \"iv\": encryptedData0[2],",
															"            \"wrappedSessionKey\": encryptedData0[3]",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"            \"mac\": encryptedData1[1],",
															"            \"iv\": encryptedData1[2],",
															"            \"wrappedSessionKey\": encryptedData1[3]",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 3072 And Session Key\",\"Please Encrypt That For RSA 3072 And Session Key\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 4096 And Session Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
															"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
															"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
															"",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa4096}}\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 4096 And Session Key\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 4096 And Session Key\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 4096 And Session Key",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02aes\",",
															"    \"wrappedKey\": \"{{private_key_rsa4096}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"            \"mac\": encryptedData0[1],",
															"            \"iv\": encryptedData0[2],",
															"            \"wrappedSessionKey\": encryptedData0[3]",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"            \"mac\": encryptedData1[1],",
															"            \"iv\": encryptedData1[2],",
															"            \"wrappedSessionKey\": encryptedData1[3]",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 4096 And Session Key\",\"Please Encrypt That For RSA 4096 And Session Key\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Asymmetric Encryption With Cert",
									"item": [
										{
											"name": "External Encrypt With RSA 2048 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa2048_with_cert}}\",\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 2048\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 2048\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 2048 With Cert",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02rsa4096\",",
															"    \"wrappedKey\": \"{{private_key_rsa2048_with_cert}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 2048\",\"Please Encrypt That For RSA 2048\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 3072 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa3072_with_cert}}\",\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 3072\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 3072\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 3072 With Cert",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02rsa4096\",",
															"    \"wrappedKey\": \"{{private_key_rsa3072_with_cert}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 3072\",\"Please Encrypt That For RSA 3072\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 4096 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa4096_with_cert}}\",\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 4096\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 4096\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 4096 With Cert",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02rsa4096\",",
															"    \"wrappedKey\": \"{{private_key_rsa4096_with_cert}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 4096\",\"Please Encrypt That For RSA 4096\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 2048 And Session Key With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
															"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
															"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
															"",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa2048_with_cert}}\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 2048 And Session Key\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 2048 And Session Key\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 2048 And Session Key With Cert",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02rsa4096\",",
															"    \"wrappedKey\": \"{{private_key_rsa2048_with_cert}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"            \"mac\": encryptedData0[1],",
															"            \"iv\": encryptedData0[2],",
															"            \"wrappedSessionKey\": encryptedData0[3]",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"            \"mac\": encryptedData1[1],",
															"            \"iv\": encryptedData1[2],",
															"            \"wrappedSessionKey\": encryptedData1[3]",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 2048 And Session Key\",\"Please Encrypt That For RSA 2048 And Session Key\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 3072 And Session Key With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
															"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
															"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
															"",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa3072_with_cert}}\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 3072 And Session Key\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 3072 And Session Key\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 3072 And Session Key With Cert",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02rsa4096\",",
															"    \"wrappedKey\": \"{{private_key_rsa3072_with_cert}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"            \"mac\": encryptedData0[1],",
															"            \"iv\": encryptedData0[2],",
															"            \"wrappedSessionKey\": encryptedData0[3]",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"            \"mac\": encryptedData1[1],",
															"            \"iv\": encryptedData1[2],",
															"            \"wrappedSessionKey\": encryptedData1[3]",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 3072 And Session Key\",\"Please Encrypt That For RSA 3072 And Session Key\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Encrypt With RSA 4096 And Session Key With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"    ",
															"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
															"        {",
															"            ciphertext = [];",
															"            ciphertext.push(bodyData.result.ciphertext[i].text)",
															"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
															"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
															"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
															"",
															"            pm.collectionVariables.set(\"external_ciphertext_result_\"+i, ciphertext);",
															"        }",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa4096_with_cert}}\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Please Encrypt This For RSA 4096 And Session Key\"\n        },\n        {\n            \"text\": \"Please Encrypt That For RSA 4096 And Session Key\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/encrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"encrypt"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Decrypt With RSA 4096 And Session Key With Cert",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"encryptedData0 =pm.collectionVariables.get(\"external_ciphertext_result_0\");",
															"encryptedData1 =pm.collectionVariables.get(\"external_ciphertext_result_1\");",
															"",
															"var body =",
															"{",
															"    \"sessionToken\": \"{{session_token}}\",",
															"    \"slotId\": 1,",
															"    \"wrappingKeyId\": \"02rsa4096\",",
															"    \"wrappedKey\": \"{{private_key_rsa4096_with_cert}}\",",
															"    \"ciphertext\": [",
															"        {",
															"            \"text\": encryptedData0[0],",
															"            \"mac\": encryptedData0[1],",
															"            \"iv\": encryptedData0[2],",
															"            \"wrappedSessionKey\": encryptedData0[3]",
															"        },",
															"        {",
															"            \"text\": encryptedData1[0],",
															"            \"mac\": encryptedData1[1],",
															"            \"iv\": encryptedData1[2],",
															"            \"wrappedSessionKey\": encryptedData1[3]",
															"        }",
															"    ]",
															"}",
															"",
															"pm.collectionVariables.set(\"external_decrypt_body\", JSON.stringify(body))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    ",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Encrypt This For RSA 4096 And Session Key\",\"Please Encrypt That For RSA 4096 And Session Key\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{external_decrypt_body}}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/decrypt",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"decrypt"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "External Signing and Verify",
							"item": [
								{
									"name": "RSA",
									"item": [
										{
											"name": "External Sign With RSA 2048",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"    bodyData = JSON.parse(responseBody)",
															"    signatureValue = bodyData.result.signature;",
															"    pm.collectionVariables.set(\"external_signature\", signatureValue);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_rsa2048}}\",\n  \"hashAlgo\" : \"SHA256\",\n  \"data\": \"Please i want you to sign this precious data with rsa2048\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/sign",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"sign"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Verify With RSA 2048",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.verified).to.eql(true)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa2048}}\",\n    \"signature\": \"{{external_signature}}\",\n    \"hashAlgo\" : \"SHA256\",\n    \"data\":\"Please i want you to sign this precious data with rsa2048\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/verify",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"verify"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Sign With RSA 3072",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"    bodyData = JSON.parse(responseBody)",
															"    signatureValue = bodyData.result.signature;",
															"    pm.collectionVariables.set(\"external_signature\", signatureValue);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_rsa3072}}\",\n  \"data\": \"Please i want you to sign this precious data with rsa3072\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/sign",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"sign"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Verify With RSA 3072",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.verified).to.eql(true)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa3072}}\",\n    \"signature\": \"{{external_signature}}\",\n    \"data\":\"Please i want you to sign this precious data with rsa3072\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/verify",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"verify"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Sign With RSA 4096",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"    bodyData = JSON.parse(responseBody)",
															"    signatureValue = bodyData.result.signature;",
															"    pm.collectionVariables.set(\"external_signature\", signatureValue);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_rsa4096}}\",\n  \"data\": \"Please i want you to sign this precious data with rsa4096\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/sign",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"sign"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Verify With RSA 4096",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.verified).to.eql(true)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa4096}}\",\n    \"signature\": \"{{external_signature}}\",\n    \"data\":\"Please i want you to sign this precious data with rsa4096\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/verify",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"verify"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Sign With RSA 2048 And Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"    bodyData = JSON.parse(responseBody)",
															"    signatureValue = bodyData.result.signature;",
															"    pm.collectionVariables.set(\"external_signature\", signatureValue);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02rsa4096\",\n  \"wrappedKey\": \"{{private_key_rsa2048_with_cert}}\",\n  \"data\": \"Please i want you to sign this precious data with rsa2048\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/sign",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"sign"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Verify With RSA 2048 And Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.verified).to.eql(true)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa2048_with_cert}}\",\n    \"signature\": \"{{external_signature}}\",\n    \"data\":\"Please i want you to sign this precious data with rsa2048\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/verify",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"verify"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Sign With RSA 3072 And Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"    bodyData = JSON.parse(responseBody)",
															"    signatureValue = bodyData.result.signature;",
															"    pm.collectionVariables.set(\"external_signature\", signatureValue);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02rsa4096\",\n  \"wrappedKey\": \"{{private_key_rsa3072_with_cert}}\",\n  \"data\": \"Please i want you to sign this precious data with rsa3072\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/sign",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"sign"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Verify With RSA 3072 And Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.verified).to.eql(true)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa3072_with_cert}}\",\n    \"signature\": \"{{external_signature}}\",\n    \"data\":\"Please i want you to sign this precious data with rsa3072\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/verify",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"verify"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Sign With RSA 4096 And Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"    bodyData = JSON.parse(responseBody)",
															"    signatureValue = bodyData.result.signature;",
															"    pm.collectionVariables.set(\"external_signature\", signatureValue);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02rsa4096\",\n  \"wrappedKey\": \"{{private_key_rsa4096_with_cert}}\",\n  \"data\": \"Please i want you to sign this precious data with rsa4096\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/sign",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"sign"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Verify With RSA 4096 And Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.verified).to.eql(true)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_rsa4096_with_cert}}\",\n    \"signature\": \"{{external_signature}}\",\n    \"data\":\"Please i want you to sign this precious data with rsa4096\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/verify",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"verify"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDSA",
									"item": [
										{
											"name": "External Sign With ECDSA-P256",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"    bodyData = JSON.parse(responseBody)",
															"    signatureValue = bodyData.result.signature;",
															"    pm.collectionVariables.set(\"external_signature\", signatureValue);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_ecdsa_p256}}\",\n  \"data\": \"Please i want you to sign this precious data with ecdsa p256\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/sign",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"sign"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Verify With ECDSA-P256",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.verified).to.eql(true)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_ecdsa_p256}}\",\n    \"signature\": \"{{external_signature}}\",\n    \"data\":\"Please i want you to sign this precious data with ecdsa p256\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/verify",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"verify"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Sign With ECDSA-P256 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"    bodyData = JSON.parse(responseBody)",
															"    signatureValue = bodyData.result.signature;",
															"    pm.collectionVariables.set(\"external_signature\", signatureValue);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02rsa4096\",\n  \"wrappedKey\": \"{{private_key_ecdsa_p256_with_cert}}\",\n  \"data\": \"Please i want you to sign this precious data with ecdsa p256\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/sign",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"sign"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Verify With ECDSA-P256 With Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Decrypt response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.verified).to.eql(true)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"publicKeyOrCert\": \"{{public_key_ecdsa_p256_with_cert}}\",\n    \"signature\": \"{{external_signature}}\",\n    \"data\":\"Please i want you to sign this precious data with ecdsa p256\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/verify",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"verify"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "External Seal and Unseal",
							"item": [
								{
									"name": "Symmetric Key",
									"item": [
										{
											"name": "External Seal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"",
															"    cipherValue = bodyData.result.ciphertext;",
															"    pm.collectionVariables.set(\"external_seal_cipher\", JSON.stringify(cipherValue));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_aes}}\",\n  \"plaintext\": [\n    \"Please Do Seal This \",\"Hello Please Seal This\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/seal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"seal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Unseal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Unseal response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Do Seal This \",\"Hello Please Seal This\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_aes}}\",\n  \"ciphertext\": {{external_seal_cipher}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/unseal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"unseal"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Asymmetric Key",
									"item": [
										{
											"name": "External Seal with RSA 2048",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"",
															"    cipherValue = bodyData.result.ciphertext;",
															"    pm.collectionVariables.set(\"external_seal_cipher\", JSON.stringify(cipherValue));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"publicKeyOrCert\": \"{{public_key_rsa2048}}\",\n  \"plaintext\": [\n    \"Please Do Seal This With RSA 2048\",\"Hello Please Seal This With RSA 2048\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/seal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"seal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Unseal with RSA 2048",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Unseal response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Do Seal This With RSA 2048\",",
															"            \"Hello Please Seal This With RSA 2048\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_rsa2048}}\",\n  \"ciphertext\": {{external_seal_cipher}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/unseal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"unseal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Seal with RSA 3072",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"",
															"    cipherValue = bodyData.result.ciphertext;",
															"    pm.collectionVariables.set(\"external_seal_cipher\", JSON.stringify(cipherValue));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"publicKeyOrCert\": \"{{public_key_rsa3072}}\",\n  \"plaintext\": [\n    \"Please Do Seal This With RSA 3072\",\"Hello Please Seal This With RSA 3072\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/seal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"seal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Unseal with RSA 3072",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Unseal response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Do Seal This With RSA 3072\",",
															"            \"Hello Please Seal This With RSA 3072\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_rsa3072}}\",\n  \"ciphertext\": {{external_seal_cipher}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/unseal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"unseal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Seal with RSA 4096",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"",
															"    cipherValue = bodyData.result.ciphertext;",
															"    pm.collectionVariables.set(\"external_seal_cipher\", JSON.stringify(cipherValue));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"publicKeyOrCert\": \"{{public_key_rsa4096}}\",\n  \"plaintext\": [\n    \"Please Do Seal This With RSA 4096\",\"Hello Please Seal This With RSA 4096\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/seal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"seal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Unseal with RSA 4096",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Unseal response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Do Seal This With RSA 4096\",",
															"            \"Hello Please Seal This With RSA 4096\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02aes\",\n  \"wrappedKey\": \"{{private_key_rsa4096}}\",\n  \"ciphertext\": {{external_seal_cipher}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/unseal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"unseal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Seal with RSA 2048 and Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"",
															"    cipherValue = bodyData.result.ciphertext;",
															"    pm.collectionVariables.set(\"external_seal_cipher\", JSON.stringify(cipherValue));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"publicKeyOrCert\": \"{{public_key_rsa2048_with_cert}}\",\n  \"plaintext\": [\n    \"Please Do Seal This With RSA 2048\",\"Hello Please Seal This With RSA 2048\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/seal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"seal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Unseal with RSA 2048 and Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Unseal response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Do Seal This With RSA 2048\",",
															"            \"Hello Please Seal This With RSA 2048\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02rsa4096\",\n  \"wrappedKey\": \"{{private_key_rsa2048_with_cert}}\",\n  \"ciphertext\": {{external_seal_cipher}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/unseal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"unseal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Seal with RSA 3072 and Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"",
															"    cipherValue = bodyData.result.ciphertext;",
															"    pm.collectionVariables.set(\"external_seal_cipher\", JSON.stringify(cipherValue));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"publicKeyOrCert\": \"{{public_key_rsa3072_with_cert}}\",\n  \"plaintext\": [\n    \"Please Do Seal This With RSA 3072\",\"Hello Please Seal This With RSA 3072\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/seal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"seal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Unseal with RSA 3072 and Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Unseal response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Do Seal This With RSA 3072\",\"Hello Please Seal This With RSA 3072\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02rsa4096\",\n  \"wrappedKey\": \"{{private_key_rsa3072_with_cert}}\",\n  \"ciphertext\": {{external_seal_cipher}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/unseal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"unseal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Seal with RSA 4096 and Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    bodyData = JSON.parse(responseBody)",
															"",
															"    cipherValue = bodyData.result.ciphertext;",
															"    pm.collectionVariables.set(\"external_seal_cipher\", JSON.stringify(cipherValue));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"publicKeyOrCert\": \"{{public_key_rsa4096_with_cert}}\",\n  \"plaintext\": [\n    \"Please Do Seal This With RSA 4096\",\"Hello Please Seal This With RSA 4096\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/seal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"seal"
													]
												}
											},
											"response": []
										},
										{
											"name": "External Unseal with RSA 4096 and Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Unseal response is equal to plaintext\",function(){",
															"    response = JSON.parse(responseBody)",
															"    pm.expect(response.result.plaintext).to.eql([\"Please Do Seal This With RSA 4096\",\"Hello Please Seal This With RSA 4096\"])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"wrappingKeyId\": \"02rsa4096\",\n  \"wrappedKey\": \"{{private_key_rsa4096_with_cert}}\",\n  \"ciphertext\": {{external_seal_cipher}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}{{api_version}}/external/unseal",
													"host": [
														"{{base_url}}{{api_version}}"
													],
													"path": [
														"external",
														"unseal"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "External Tokenize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"",
											"    ",
											"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
											"        {",
											"            tokenizedText = [];",
											"            tokenizedText.push(bodyData.result.ciphertext[i].token)",
											"            tokenizedText.push(bodyData.result.ciphertext[i].metadata)",
											"            pm.collectionVariables.set(\"external_tokenize_ciphertext_result_\"+i, tokenizedText);",
											"        }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"wrappingKeyId\": \"02aes\",\n    \"wrappedKey\": \"{{private_key_aes}}\",\n    \"plaintext\": [\n        {\n            \"text\": \"4281 5790 7311 2819\",\n            \"formatChar\": \"$$$$%%%%%%%%%%%$$$$\"\n        },\n        {\n            \"text\": \"4281 4412 2143 3017\",\n            \"formatChar\": \"$$$$%%%%%%%%%%%$$$$\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/external/tokenize",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"external",
										"tokenize"
									]
								}
							},
							"response": []
						},
						{
							"name": "External Detokenize",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"tokenizedData0 = pm.collectionVariables.get(\"external_tokenize_ciphertext_result_0\");",
											"tokenizedData1 = pm.collectionVariables.get(\"external_tokenize_ciphertext_result_1\");",
											"",
											"var body =",
											"{",
											"    \"sessionToken\": \"{{session_token}}\",",
											"    \"slotId\": 1,",
											"    \"wrappingKeyId\": \"02aes\",",
											"    \"wrappedKey\": \"{{private_key_aes}}\",",
											"    \"ciphertext\": [",
											"        {",
											"            \"token\": tokenizedData0[0],",
											"            \"metadata\": tokenizedData0[1]",
											"        },",
											"        {",
											"            \"token\": tokenizedData1[0],",
											"            \"metadata\": tokenizedData1[1]",
											"        }",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"external_detokenize_body\", JSON.stringify(body))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Unseal response is equal to plaintext\",function(){",
											"    response = JSON.parse(responseBody)",
											"    // console.log(response);",
											"    pm.expect(response.result.plaintext[0].text).to.eql(\"4281 5790 7311 2819\");",
											"    pm.expect(response.result.plaintext[1].text).to.eql(\"4281 4412 2143 3017\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{external_detokenize_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/external/detokenize",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"external",
										"detokenize"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mac Generation And Verify",
					"item": [
						{
							"name": "Cmac",
							"item": [
								{
									"name": "Cmac Generate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    bodyData = JSON.parse(responseBody)",
													"    macValue = bodyData.result.mac;",
													"    pm.collectionVariables.set(\"mac_result\", macValue);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"keyId\": \"05aes\",\n  \"hashAlgo\": \"CMAC\",\n  \"data\": \"Cmac This and Cmac That\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/mac/generate",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"mac",
												"generate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cmac Verify",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Mac Result is verified\",function(){",
													"    response = JSON.parse(responseBody)",
													"    pm.expect(response.result.verified).to.eql(true)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"keyId\": \"05aes\",\n  \"hashAlgo\": \"CMAC\",\n  \"data\": \"Cmac This and Cmac That\",\n  \"mac\": \"{{mac_result}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/mac/verify",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"mac",
												"verify"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "HMAC-SHA256",
							"item": [
								{
									"name": "Hmac Generate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    bodyData = JSON.parse(responseBody)",
													"    macValue = bodyData.result.mac;",
													"    pm.collectionVariables.set(\"mac_result\", macValue);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"keyId\": \"05aes\",\n  \"hashAlgo\": \"HMAC-SHA256\",\n  \"data\": \"Data to be hashed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/mac/generate",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"mac",
												"generate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hmac Verify",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Mac Result is verified\",function(){",
													"    response = JSON.parse(responseBody)",
													"    pm.expect(response.result.verified).to.eql(true)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"keyId\": \"05aes\",\n  \"hashAlgo\": \"HMAC-SHA256\",\n  \"data\": \"Data to be hashed\",\n  \"mac\": \"{{mac_result}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/mac/verify",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"mac",
												"verify"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Gmac-256",
							"item": [
								{
									"name": "Gmac Generate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    bodyData = JSON.parse(responseBody)",
													"    macValue = bodyData.result.mac;",
													"    ivValue = bodyData.result.iv",
													"    pm.collectionVariables.set(\"mac_result\", macValue);",
													"    pm.collectionVariables.set(\"mac_iv_result\", ivValue);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"keyId\": \"05aes\",\n  \"hashAlgo\": \"GMAC-256\",\n  \"data\": \"this Data important\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/mac/generate",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"mac",
												"generate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Gmac Verify",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Mac Result is verified\",function(){",
													"    response = JSON.parse(responseBody)",
													"    pm.expect(response.result.verified).to.eql(true)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"keyId\": \"05aes\",\n  \"hashAlgo\": \"GMAC-256\",\n  \"data\": \"this Data important\",\n  \"mac\": \"{{mac_result}}\",\n  \"iv\": \"{{mac_iv_result}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/mac/verify",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"mac",
												"verify"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Sign",
					"item": [
						{
							"name": "Sign with RSA 2048",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"",
											"    signatureValue = bodyData.result.signature;",
											"    pm.collectionVariables.set(\"signature_result\", signatureValue);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"03rsa2048\",\n    \"data\": \"Please sign this very very very important data with RSA 2048\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/sign",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"sign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify with RSA 2048",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify Result is verified\",function(){",
											"    response = JSON.parse(responseBody)",
											"    pm.expect(response.result.verified).to.eql(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"03rsa2048\",\n    \"hashAlgo\": \"SHA256\",\n    \"data\": \"Please sign this very very very important data with RSA 2048\",\n    \"signature\": \"{{signature_result}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/verify",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign with RSA 3072",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"",
											"    signatureValue = bodyData.result.signature;",
											"    pm.collectionVariables.set(\"signature_result\", signatureValue);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"03rsa3072\",\n    \"hashAlgo\": \"SHA-256\",\n    \"data\": \"Please sign this very very very important data with RSA 3072\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/sign",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"sign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify with RSA 3072",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify Result is verified\",function(){",
											"    response = JSON.parse(responseBody)",
											"    pm.expect(response.result.verified).to.eql(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"03rsa3072\",\n    \"data\": \"Please sign this very very very important data with RSA 3072\",\n    \"signature\": \"{{signature_result}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/verify",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign with RSA 4096",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"",
											"    signatureValue = bodyData.result.signature;",
											"    pm.collectionVariables.set(\"signature_result\", signatureValue);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"03rsa4096\",\n    \"data\": \"Please sign this very very very important data with RSA 4096\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/sign",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"sign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify with RSA 4096",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify Result is verified\",function(){",
											"    response = JSON.parse(responseBody)",
											"    pm.expect(response.result.verified).to.eql(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"03rsa4096\",\n    \"data\": \"Please sign this very very very important data with RSA 4096\",\n    \"signature\": \"{{signature_result}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/verify",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign with ECDSA-P256",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"",
											"    signatureValue = bodyData.result.signature;",
											"    pm.collectionVariables.set(\"signature_result\", signatureValue);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"03ecdsap256\",\n    \"data\": \"Please sign this very very very important data with ECDSA-P256\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/sign",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"sign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify with ECDSA-P256",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify Result is verified\",function(){",
											"    response = JSON.parse(responseBody)",
											"    pm.expect(response.result.verified).to.eql(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"03ecdsap256\",\n    \"data\": \"Please sign this very very very important data with ECDSA-P256\",\n    \"signature\": \"{{signature_result}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/verify",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"verify"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Seal And Unseal",
					"item": [
						{
							"name": "Symmetric Key",
							"item": [
								{
									"name": "Seal with AES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  //IF SUCCESS DO THIS",
													"  bodyData = JSON.parse(responseBody)",
													"  cipherValue = bodyData.result.ciphertext;",
													"  pm.collectionVariables.set(\"seal_cipher\", JSON.stringify(cipherValue));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"01aes\",\n    \"plaintext\": [\n        \"Please please Seal this data\", \"This Data very Important\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/seal",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"seal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unseal with AES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Mac Result is verified\",function(){",
													"    response = JSON.parse(responseBody)",
													"    pm.expect(response.result.plaintext).to.eql([",
													"            \"Please please Seal this data\",",
													"            \"This Data very Important\"",
													"        ])",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": {{slot_id}},\n\"ciphertext\": {{seal_cipher}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/unseal",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"unseal"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Assymmetric Key",
							"item": [
								{
									"name": "Seal with RSA 2048",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  //IF SUCCESS DO THIS",
													"  bodyData = JSON.parse(responseBody)",
													"  cipherValue = bodyData.result.ciphertext;",
													"  pm.collectionVariables.set(\"seal_cipher\", JSON.stringify(cipherValue));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"01rsa2048\",\n    \"plaintext\": [\n        \"Please please Seal this data With RSA 2048\", \"This Data very Important\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/seal",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"seal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unseal with  RSA 2048",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Unseal Result is verified\",function(){",
													"    response = JSON.parse(responseBody)",
													"    pm.expect(response.result.plaintext).to.eql([",
													"            \"Please please Seal this data With RSA 2048\",",
													"            \"This Data very Important\"",
													"        ])",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": {{slot_id}},\n\"ciphertext\": {{seal_cipher}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/unseal",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"unseal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Seal with RSA 3072",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  //IF SUCCESS DO THIS",
													"  bodyData = JSON.parse(responseBody)",
													"  cipherValue = bodyData.result.ciphertext;",
													"  pm.collectionVariables.set(\"seal_cipher\", JSON.stringify(cipherValue));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"01rsa3072\",\n    \"plaintext\": [\n        \"Please please Seal this data With RSA 3072\", \"This Data very Important\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/seal",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"seal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unseal with  RSA 3072",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Mac Result is verified\",function(){",
													"    response = JSON.parse(responseBody)",
													"    pm.expect(response.result.plaintext).to.eql([",
													"            \"Please please Seal this data With RSA 3072\",",
													"            \"This Data very Important\"",
													"        ])",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": {{slot_id}},\n\"ciphertext\": {{seal_cipher}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/unseal",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"unseal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Seal with RSA 4096",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  //IF SUCCESS DO THIS",
													"  bodyData = JSON.parse(responseBody)",
													"  cipherValue = bodyData.result.ciphertext;",
													"  pm.collectionVariables.set(\"seal_cipher\", JSON.stringify(cipherValue));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"01rsa4096\",\n    \"plaintext\": [\n        \"Please please Seal this data With RSA 4096\", \"This Data very Important\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/seal",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"seal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unseal with  RSA 4096",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Mac Result is verified\",function(){",
													"    response = JSON.parse(responseBody)",
													"    pm.expect(response.result.plaintext).to.eql([",
													"            \"Please please Seal this data With RSA 4096\",",
													"            \"This Data very Important\"",
													"        ])",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": {{slot_id}},\n\"ciphertext\": {{seal_cipher}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{api_version}}/unseal",
											"host": [
												"{{base_url}}{{api_version}}"
											],
											"path": [
												"unseal"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Encrypt And Decrypt",
					"item": [
						{
							"name": "Encrypt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
											"        {",
											"            ciphertext = [];",
											"            ciphertext.push(bodyData.result.ciphertext[i].text)",
											"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
											"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
											"            ciphertext.push(bodyData.result.keyVersion)",
											"            pm.collectionVariables.set(\"ciphertext_result_\"+i, ciphertext);",
											"        }",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "10000",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": 1,\n    \"keyId\": \"01aes\",\n    \"plaintext\": [\n        {\n            \"aad\": \"Test\",\n            \"text\": \"PT. Sandhiguna Widya Proteksi\"\n        },\n        {\n            \"aad\": \"Test\",\n            \"text\": \"isketorP aydiW anugihdnaS .TP\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/encrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"encrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decrypt",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"encryptedData0 = pm.collectionVariables.get(\"ciphertext_result_0\")",
											"encryptedData1 = pm.collectionVariables.get(\"ciphertext_result_1\")",
											"",
											"",
											"var body = ",
											"    {",
											"        \"sessionToken\": \"{{session_token}}\",",
											"        \"slotId\": 1,",
											"        \"keyId\": \"01aes\",",
											"        \"keyVersion\": encryptedData0[3], // GA 1.0.12",
											"        \"ciphertext\": [",
											"            {",
											"                \"aad\" : \"Test\",",
											"                \"text\": encryptedData0[0],",
											"                \"mac\": encryptedData0[1],",
											"                \"iv\": encryptedData0[2],",
											"                // \"keyVersion\": encryptedData0[3]",
											"            },",
											"            {",
											"                \"aad\" : \"Test\",",
											"                \"text\": encryptedData1[0],",
											"                \"mac\": encryptedData1[1],",
											"                \"iv\": encryptedData1[2],",
											"                // \"keyVersion\": encryptedData1[3]",
											"            }",
											"        ]",
											"    }",
											"",
											"pm.collectionVariables.set(\"decrypt_body\", JSON.stringify(body))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Decrypt Result is verified\",function(){",
											"    response = JSON.parse(responseBody)",
											"    pm.expect(response.result.plaintext).to.eql([",
											"            \"PT. Sandhiguna Widya Proteksi\",",
											"            \"isketorP aydiW anugihdnaS .TP\"",
											"        ])",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{decrypt_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/decrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"decrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Encrypt With RSA 2048",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
											"        {",
											"            ciphertext = [];",
											"            ciphertext.push(bodyData.result.ciphertext[i].text)",
											"            pm.collectionVariables.set(\"ciphertext_result_\"+i, ciphertext);",
											"        }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "10000",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": 1,\n    \"keyId\": \"01rsa2048\",\n    \"plaintext\": [\n        {\n            \"text\": \"Testing This \"\n        },\n        {\n            \"text\": \"Testing This and That \"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/encrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"encrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decrypt With RSA 2048",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"encryptData0 = pm.collectionVariables.get(\"ciphertext_result_0\")",
											"encryptData1 = pm.collectionVariables.get(\"ciphertext_result_1\")",
											"",
											"var body = ",
											"    {",
											"        \"sessionToken\": \"{{session_token}}\",",
											"        \"slotId\": 1,",
											"        \"keyId\": \"01rsa2048\",",
											"        \"ciphertext\": [",
											"            {",
											"                \"text\": encryptData0[0]",
											"            },",
											"            {",
											"                \"text\": encryptData1[0]",
											"            }",
											"        ]",
											"    }",
											"",
											"pm.collectionVariables.set(\"decrypt_body\", JSON.stringify(body))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{decrypt_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/decrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"decrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Encrypt With RSA 3072",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
											"        {",
											"            ciphertext = [];",
											"            ciphertext.push(bodyData.result.ciphertext[i].text)",
											"            pm.collectionVariables.set(\"ciphertext_result_\"+i, ciphertext);",
											"        }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "10000",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": 1,\n    \"keyId\": \"01rsa3072\",\n    \"plaintext\": [\n        {\n            \"text\": \"Testing This 3072\"\n        },\n        {\n            \"text\": \"Testing This and That 3072\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/encrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"encrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decrypt With RSA 3072",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"encryptData0 = pm.collectionVariables.get(\"ciphertext_result_0\")",
											"encryptData1 = pm.collectionVariables.get(\"ciphertext_result_1\")",
											"",
											"var body = ",
											"    {",
											"        \"sessionToken\": \"{{session_token}}\",",
											"        \"slotId\": 1,",
											"        \"keyId\": \"01rsa3072\",",
											"        \"ciphertext\": [",
											"            {",
											"                \"text\": encryptData0[0]",
											"            },",
											"            {",
											"                \"text\": encryptData1[0]",
											"            }",
											"        ]",
											"    }",
											"",
											"pm.collectionVariables.set(\"decrypt_body\", JSON.stringify(body))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{decrypt_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/decrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"decrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Encrypt With RSA 4096",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
											"        {",
											"            ciphertext = [];",
											"            ciphertext.push(bodyData.result.ciphertext[i].text)",
											"            pm.collectionVariables.set(\"ciphertext_result_\"+i, ciphertext);",
											"        }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "10000",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": 1,\n    \"keyId\": \"01rsa4096\",\n    \"plaintext\": [\n        {\n            \"text\": \"Testing This 4096\"\n        },\n        {\n            \"text\": \"Testing This and That 4096\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/encrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"encrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decrypt With RSA 4096",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"encryptData0 = pm.collectionVariables.get(\"ciphertext_result_0\")",
											"encryptData1 = pm.collectionVariables.get(\"ciphertext_result_1\")",
											"",
											"var body = ",
											"    {",
											"        \"sessionToken\": \"{{session_token}}\",",
											"        \"slotId\": 1,",
											"        \"keyId\": \"01rsa4096\",",
											"        \"ciphertext\": [",
											"            {",
											"                \"text\": encryptData0[0]",
											"            },",
											"            {",
											"                \"text\": encryptData1[0]",
											"            }",
											"        ]",
											"    }",
											"",
											"pm.collectionVariables.set(\"decrypt_body\", JSON.stringify(body))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{decrypt_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/decrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"decrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Encrypt With RSA 2048 With Session Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
											"        {",
											"            ciphertext = [];",
											"            ciphertext.push(bodyData.result.ciphertext[i].text)",
											"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
											"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
											"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
											"",
											"            pm.collectionVariables.set(\"ciphertext_result_\"+i, ciphertext);",
											"        }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "10000",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": 1,\n    \"keyId\": \"01rsa2048\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Testing This \"\n        },\n        {\n            \"text\": \"Testing This and That \"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/encrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"encrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decrypt With RSA 2048 With Session Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"encryptData0 = pm.collectionVariables.get(\"ciphertext_result_0\")",
											"encryptData1 = pm.collectionVariables.get(\"ciphertext_result_1\")",
											"",
											"var body = ",
											"    {",
											"        \"sessionToken\": \"{{session_token}}\",",
											"        \"slotId\": 1,",
											"        \"keyId\": \"01rsa2048\",",
											"        \"ciphertext\": [",
											"            {",
											"                \"text\": encryptData0[0],",
											"                \"mac\": encryptData0[1],",
											"                \"iv\": encryptData0[2],",
											"                \"wrappedSessionKey\": encryptData0[3]",
											"            },",
											"            {",
											"                \"text\": encryptData1[0],",
											"                \"mac\": encryptData1[1],",
											"                \"iv\": encryptData1[2],",
											"                \"wrappedSessionKey\": encryptData1[3]",
											"            }",
											"        ]",
											"    }",
											"",
											"pm.collectionVariables.set(\"decrypt_body\", JSON.stringify(body))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{decrypt_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/decrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"decrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Encrypt With RSA 3072 With Session Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
											"        {",
											"            ciphertext = [];",
											"            ciphertext.push(bodyData.result.ciphertext[i].text)",
											"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
											"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
											"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
											"",
											"            pm.collectionVariables.set(\"ciphertext_result_\"+i, ciphertext);",
											"        }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "10000",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": 1,\n    \"keyId\": \"01rsa3072\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Testing This \"\n        },\n        {\n            \"text\": \"Testing This and That \"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/encrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"encrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decrypt With RSA 3072 With Session Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"encryptData0 = pm.collectionVariables.get(\"ciphertext_result_0\")",
											"encryptData1 = pm.collectionVariables.get(\"ciphertext_result_1\")",
											"",
											"var body = ",
											"    {",
											"        \"sessionToken\": \"{{session_token}}\",",
											"        \"slotId\": 1,",
											"        \"keyId\": \"01rsa3072\",",
											"        \"ciphertext\": [",
											"            {",
											"                \"text\": encryptData0[0],",
											"                \"mac\": encryptData0[1],",
											"                \"iv\": encryptData0[2],",
											"                \"wrappedSessionKey\": encryptData0[3]",
											"            },",
											"            {",
											"                \"text\": encryptData1[0],",
											"                \"mac\": encryptData1[1],",
											"                \"iv\": encryptData1[2],",
											"                \"wrappedSessionKey\": encryptData1[3]",
											"            }",
											"        ]",
											"    }",
											"",
											"pm.collectionVariables.set(\"decrypt_body\", JSON.stringify(body))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{decrypt_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/decrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"decrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Encrypt With RSA 4096 With Session Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"",
											"    bodyData = JSON.parse(responseBody)",
											"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
											"        {",
											"            ciphertext = [];",
											"            ciphertext.push(bodyData.result.ciphertext[i].text)",
											"            ciphertext.push(bodyData.result.ciphertext[i].mac)",
											"            ciphertext.push(bodyData.result.ciphertext[i].iv)",
											"            ciphertext.push(bodyData.result.ciphertext[i].wrappedSessionKey)",
											"",
											"            pm.collectionVariables.set(\"ciphertext_result_\"+i, ciphertext);",
											"        }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Length",
										"value": "10000",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": 1,\n    \"keyId\": \"01rsa4096\",\n    \"useSessionKey\": true,\n    \"plaintext\": [\n        {\n            \"text\": \"Testing This \"\n        },\n        {\n            \"text\": \"Testing This and That \"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/encrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"encrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decrypt With RSA 4096 With Session Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"encryptData0 = pm.collectionVariables.get(\"ciphertext_result_0\")",
											"encryptData1 = pm.collectionVariables.get(\"ciphertext_result_1\")",
											"",
											"var body = ",
											"    {",
											"        \"sessionToken\": \"{{session_token}}\",",
											"        \"slotId\": 1,",
											"        \"keyId\": \"01rsa4096\",",
											"        \"ciphertext\": [",
											"            {",
											"                \"text\": encryptData0[0],",
											"                \"mac\": encryptData0[1],",
											"                \"iv\": encryptData0[2],",
											"                \"wrappedSessionKey\": encryptData0[3]",
											"            },",
											"            {",
											"                \"text\": encryptData1[0],",
											"                \"mac\": encryptData1[1],",
											"                \"iv\": encryptData1[2],",
											"                \"wrappedSessionKey\": encryptData1[3]",
											"            }",
											"        ]",
											"    }",
											"",
											"pm.collectionVariables.set(\"decrypt_body\", JSON.stringify(body))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{decrypt_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/decrypt",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"decrypt"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Certificate Signing And Verify",
					"item": [
						{
							"name": "Certificate Signing With ECDSA-P256",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  //IF SUCCESS DO THIS",
											"  bodyData = JSON.parse(responseBody)",
											"  signedValue = bodyData.result.certificate;",
											"  signed = signedValue.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\");",
											"  pm.collectionVariables.set(\"signed_certificate\", signed);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": 1,\n\"validityPeriod\": 365,\n\"keyId\": \"04ecdsap256\",\n\"hashAlgo\": \"SHA512\",\n\"csr\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIID8zCCAlsCAQAwga0xCzAJBgNVBAYTAklEMRcwFQYDVQQIDA5LZXB1bGF1YW4g\\nUmlhdTEOMAwGA1UEBwwFQmF0YW0xJjAkBgNVBAoMHVBULiBTYW5kaGlndW5hIFdp\\nZHlhIFByb3Rla3NpMRowGAYDVQQLDBFRdWFsaXR5IEFzc3VyYW5jZTELMAkGA1UE\\nAwwCUUExJDAiBgkqhkiG9w0BCQEWFXJhaWhhbkBzYW5kaGlndW5hLmNvbTCCAaIw\\nDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAJYAIbltbWtdikggo9O1bkU/oYwZ\\nYNTOzOIW7Du3Msyvkw+oMeITsHv302KflhDoKdyLDD0BiWeaSSNUuKJ65tbkTwlV\\nBm7I+0BuHMcEWbrjOgCNdr9LBny47VZ139swAz+vDdmWi44aETNde/Vy/cYeRYrR\\nT7rOZ6M1c8YwTw0eNBDYWelvCcRZS7cd19DdQEqEb0C4II3ABpHut4DQ5H27BeHS\\n2Nti69pNx4KXigT1FpbJbaoYTOAEIEeqz5tuVSTG3SLddKl5XnMDLUzzY+eq6F4S\\nWLISlCSJl2W48p+Hwx+pvN8TMDNkGSq5kz2JNqqnY7++ouHyGRKCKc1XMyFdsmV4\\nB5VG2aKrJAbI/j18sRFI4p2GSaZLDonxGkekU6X6wpvLWBF1MESVS37FsI2aOGHs\\nP1695zTdgFvLobLQgjiGqRXQg12bmpEeMZTJm8d9gDcIJq9jIyJ5kOBC2Ce+nGQB\\njxFudd8xtlrkjuyGg1U552Tkw4Gv/p1iW5JvZQIDAQABoAAwDQYJKoZIhvcNAQEL\\nBQADggGBAD5/Mu6ewpx9vY39wk0x8iOksIfnlK1MSWnf6l4YD1CORFmDjjNcySie\\nZj4Kie1FjSEEUTw3ReusxdTweekJvmESpIcxwxR0BNJqVlc9xA6A3oDBYel4W2Oy\\ngMG9emBEbAm17RTBBiDKBb+QOYUqB/LuyOpVVpa7ynl7Svweq5usE4rzVKjOJ0nb\\nlWqY+LCyBDfCbpsqMocWZN2EZiWwZQSsmMUqzIg76ql5RTWxC8Dvgp4keYl82JSs\\njybOkvzOZShEA6X/lO5UYo85hIZiIh1gq7Tdw0G9zrCIZdJCnNwzmYGxMyOuW/6n\\nPP/r0aWKcaz2r3V1ansjhr31oJbb7nLRbnx8vEz6pOzFCAeY5v2too0axm6MA4fp\\n83Ile9yNPvmeBBGLn8vwcnRzNPcveST175Ja2wZnLlP7wrD72iSAYFzO4NT2GLls\\neTY9scIj1+i3PpgkAzVoR3PsmXa2uIdg4J2Mwf01kbn8xY73v7ZSyMUPPN9UDOYy\\nGpX9uowH4w==\\n-----END CERTIFICATE REQUEST-----\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/cert/sign",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"cert",
										"sign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Certificate Verify With ECDSA-P256",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": 1,\n\"keyId\": \"04ecdsap256\",\n\"certificate\": \"{{signed_certificate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/cert/verify",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"cert",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Certificate Signing With RSA-3072",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  //IF SUCCESS DO THIS",
											"  bodyData = JSON.parse(responseBody)",
											"  signedValue = bodyData.result.certificate;",
											"  signed = signedValue.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\");",
											"  pm.collectionVariables.set(\"signed_certificate\", signed);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": 1,\n\"validityPeriod\": 365,\n\"keyId\": \"04rsa3072\",\n\"hashAlgo\": \"SHA512\",\n\"csr\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIID8zCCAlsCAQAwga0xCzAJBgNVBAYTAklEMRcwFQYDVQQIDA5LZXB1bGF1YW4g\\nUmlhdTEOMAwGA1UEBwwFQmF0YW0xJjAkBgNVBAoMHVBULiBTYW5kaGlndW5hIFdp\\nZHlhIFByb3Rla3NpMRowGAYDVQQLDBFRdWFsaXR5IEFzc3VyYW5jZTELMAkGA1UE\\nAwwCUUExJDAiBgkqhkiG9w0BCQEWFXJhaWhhbkBzYW5kaGlndW5hLmNvbTCCAaIw\\nDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAJYAIbltbWtdikggo9O1bkU/oYwZ\\nYNTOzOIW7Du3Msyvkw+oMeITsHv302KflhDoKdyLDD0BiWeaSSNUuKJ65tbkTwlV\\nBm7I+0BuHMcEWbrjOgCNdr9LBny47VZ139swAz+vDdmWi44aETNde/Vy/cYeRYrR\\nT7rOZ6M1c8YwTw0eNBDYWelvCcRZS7cd19DdQEqEb0C4II3ABpHut4DQ5H27BeHS\\n2Nti69pNx4KXigT1FpbJbaoYTOAEIEeqz5tuVSTG3SLddKl5XnMDLUzzY+eq6F4S\\nWLISlCSJl2W48p+Hwx+pvN8TMDNkGSq5kz2JNqqnY7++ouHyGRKCKc1XMyFdsmV4\\nB5VG2aKrJAbI/j18sRFI4p2GSaZLDonxGkekU6X6wpvLWBF1MESVS37FsI2aOGHs\\nP1695zTdgFvLobLQgjiGqRXQg12bmpEeMZTJm8d9gDcIJq9jIyJ5kOBC2Ce+nGQB\\njxFudd8xtlrkjuyGg1U552Tkw4Gv/p1iW5JvZQIDAQABoAAwDQYJKoZIhvcNAQEL\\nBQADggGBAD5/Mu6ewpx9vY39wk0x8iOksIfnlK1MSWnf6l4YD1CORFmDjjNcySie\\nZj4Kie1FjSEEUTw3ReusxdTweekJvmESpIcxwxR0BNJqVlc9xA6A3oDBYel4W2Oy\\ngMG9emBEbAm17RTBBiDKBb+QOYUqB/LuyOpVVpa7ynl7Svweq5usE4rzVKjOJ0nb\\nlWqY+LCyBDfCbpsqMocWZN2EZiWwZQSsmMUqzIg76ql5RTWxC8Dvgp4keYl82JSs\\njybOkvzOZShEA6X/lO5UYo85hIZiIh1gq7Tdw0G9zrCIZdJCnNwzmYGxMyOuW/6n\\nPP/r0aWKcaz2r3V1ansjhr31oJbb7nLRbnx8vEz6pOzFCAeY5v2too0axm6MA4fp\\n83Ile9yNPvmeBBGLn8vwcnRzNPcveST175Ja2wZnLlP7wrD72iSAYFzO4NT2GLls\\neTY9scIj1+i3PpgkAzVoR3PsmXa2uIdg4J2Mwf01kbn8xY73v7ZSyMUPPN9UDOYy\\nGpX9uowH4w==\\n-----END CERTIFICATE REQUEST-----\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/cert/sign",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"cert",
										"sign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Certificate Verify With RSA-3072",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": 1,\n\"keyId\": \"04rsa3072\",\n\"certificate\": \"{{signed_certificate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/cert/verify",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"cert",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Certificate Signing With RSA-4096",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  //IF SUCCESS DO THIS",
											"  bodyData = JSON.parse(responseBody)",
											"  signedValue = bodyData.result.certificate;",
											"  signed = signedValue.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\");",
											"  pm.collectionVariables.set(\"signed_certificate\", signed);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": 1,\n\"validityPeriod\": 365,\n\"keyId\": \"04rsa4096\",\n\"hashAlgo\": \"SHA512\",\n\"csr\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIID8zCCAlsCAQAwga0xCzAJBgNVBAYTAklEMRcwFQYDVQQIDA5LZXB1bGF1YW4g\\nUmlhdTEOMAwGA1UEBwwFQmF0YW0xJjAkBgNVBAoMHVBULiBTYW5kaGlndW5hIFdp\\nZHlhIFByb3Rla3NpMRowGAYDVQQLDBFRdWFsaXR5IEFzc3VyYW5jZTELMAkGA1UE\\nAwwCUUExJDAiBgkqhkiG9w0BCQEWFXJhaWhhbkBzYW5kaGlndW5hLmNvbTCCAaIw\\nDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAJYAIbltbWtdikggo9O1bkU/oYwZ\\nYNTOzOIW7Du3Msyvkw+oMeITsHv302KflhDoKdyLDD0BiWeaSSNUuKJ65tbkTwlV\\nBm7I+0BuHMcEWbrjOgCNdr9LBny47VZ139swAz+vDdmWi44aETNde/Vy/cYeRYrR\\nT7rOZ6M1c8YwTw0eNBDYWelvCcRZS7cd19DdQEqEb0C4II3ABpHut4DQ5H27BeHS\\n2Nti69pNx4KXigT1FpbJbaoYTOAEIEeqz5tuVSTG3SLddKl5XnMDLUzzY+eq6F4S\\nWLISlCSJl2W48p+Hwx+pvN8TMDNkGSq5kz2JNqqnY7++ouHyGRKCKc1XMyFdsmV4\\nB5VG2aKrJAbI/j18sRFI4p2GSaZLDonxGkekU6X6wpvLWBF1MESVS37FsI2aOGHs\\nP1695zTdgFvLobLQgjiGqRXQg12bmpEeMZTJm8d9gDcIJq9jIyJ5kOBC2Ce+nGQB\\njxFudd8xtlrkjuyGg1U552Tkw4Gv/p1iW5JvZQIDAQABoAAwDQYJKoZIhvcNAQEL\\nBQADggGBAD5/Mu6ewpx9vY39wk0x8iOksIfnlK1MSWnf6l4YD1CORFmDjjNcySie\\nZj4Kie1FjSEEUTw3ReusxdTweekJvmESpIcxwxR0BNJqVlc9xA6A3oDBYel4W2Oy\\ngMG9emBEbAm17RTBBiDKBb+QOYUqB/LuyOpVVpa7ynl7Svweq5usE4rzVKjOJ0nb\\nlWqY+LCyBDfCbpsqMocWZN2EZiWwZQSsmMUqzIg76ql5RTWxC8Dvgp4keYl82JSs\\njybOkvzOZShEA6X/lO5UYo85hIZiIh1gq7Tdw0G9zrCIZdJCnNwzmYGxMyOuW/6n\\nPP/r0aWKcaz2r3V1ansjhr31oJbb7nLRbnx8vEz6pOzFCAeY5v2too0axm6MA4fp\\n83Ile9yNPvmeBBGLn8vwcnRzNPcveST175Ja2wZnLlP7wrD72iSAYFzO4NT2GLls\\neTY9scIj1+i3PpgkAzVoR3PsmXa2uIdg4J2Mwf01kbn8xY73v7ZSyMUPPN9UDOYy\\nGpX9uowH4w==\\n-----END CERTIFICATE REQUEST-----\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/cert/sign",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"cert",
										"sign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Certificate Verify With RSA-4096",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"sessionToken\": \"{{session_token}}\",\n\"slotId\": 1,\n\"keyId\": \"04rsa4096\",\n\"certificate\": \"{{signed_certificate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{api_version}}/cert/verify",
									"host": [
										"{{base_url}}{{api_version}}"
									],
									"path": [
										"cert",
										"verify"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Secret Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"secretId\": \"secret1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{api_version}}/secret/get",
							"host": [
								"{{base_url}}{{api_version}}"
							],
							"path": [
								"secret",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tokenize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    bodyData = JSON.parse(responseBody)",
									"    for (var i=0;i<bodyData.result.ciphertext.length;i++)",
									"        {",
									"            tokenizedText = [];",
									"            tokenizedText.push(bodyData.result.ciphertext[i].token)",
									"            tokenizedText.push(bodyData.result.ciphertext[i].metadata)",
									"            pm.collectionVariables.set(\"tokenize_ciphertext_result_\"+i, tokenizedText);",
									"        }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\" : \"01aes\",\n    \"plaintext\": [\n        {\n            \"text\": \"Raigan-0213\",\n            \"formatChar\": \"%%%%%%%$$$$\"\n        },\n         {\n            \"text\": \"Raihan-0111\",\n            \"formatChar\": \"%%%%%%%$$$$\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{api_version}}/tokenize",
							"host": [
								"{{base_url}}{{api_version}}"
							],
							"path": [
								"tokenize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Detokenize",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"data0 = pm.collectionVariables.get(\"tokenize_ciphertext_result_0\");",
									"data1 = pm.collectionVariables.get(\"tokenize_ciphertext_result_1\");",
									"encryptedData0 = pm.collectionVariables.get(\"ciphertext_result_0\")",
									"",
									"",
									"var body =",
									"{",
									"    \"sessionToken\": \"{{session_token}}\",",
									"    \"slotId\": 1,",
									"    \"keyId\": \"01aes\",",
									"    \"ciphertext\": [",
									"        {",
									"            \"token\": data0[0],",
									"            \"metadata\": data0[1]",
									"        },",
									"        {",
									"            \"token\": data1[0],",
									"            \"metadata\": data1[1]",
									"        }",
									"    ]",
									"}",
									"",
									"pm.collectionVariables.set(\"detokenize_body\", JSON.stringify(body))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Unseal Result is verified\",function(){",
									"    response = JSON.parse(responseBody)",
									"    // pm.expect(response.result.plaintext).to.eql([",
									"    //         \"Raigan-0213\",",
									"    //         \"Raihan-0111\"",
									"    //     ])",
									"",
									"    // GA 1.0-12",
									"    pm.expect(response.result.plaintext[0].text).to.eql(\"Raigan-0213\");",
									"    pm.expect(response.result.plaintext[1].text).to.eql(\"Raihan-0111\");",
									"    // pm.expect(response.result.plaintext[2].text).to.eql(\"Raihan-3333\");",
									"    // pm.expect(response.result.plaintext[3].text).to.eql(\"Raihan-4444\");",
									"    // pm.expect(response.result.plaintext[4].text).to.eql(\"Raihan-5555\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{detokenize_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{api_version}}/detokenize",
							"host": [
								"{{base_url}}{{api_version}}"
							],
							"path": [
								"detokenize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Random Number Generator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sessionToken\": \"{{session_token}}\",\n  \"slotId\": {{slot_id}},\n  \"length\": 16\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{api_version}}/rng",
							"host": [
								"{{base_url}}{{api_version}}"
							],
							"path": [
								"rng"
							]
						}
					},
					"response": []
				},
				{
					"name": "Key Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sessionToken\": \"{{session_token}}\",\n    \"slotId\": {{slot_id}},\n    \"keyId\": \"01aes\",\n    \"keyVersion\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{api_version}}/key/info",
							"host": [
								"{{base_url}}{{api_version}}"
							],
							"path": [
								"key",
								"info"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"api_version\", \"v1.0\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					" "
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://127.0.0.1:7083/",
			"type": "string"
		},
		{
			"key": "api_version",
			"value": "v1.0",
			"type": "string"
		},
		{
			"key": "slot_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "key_version",
			"value": 0,
			"type": "string"
		},
		{
			"key": "session_token",
			"value": "NULL"
		},
		{
			"key": "private_key_rsa2048",
			"value": "NULL",
			"type": "string"
		},
		{
			"key": "public_key_rsa2048",
			"value": "NULL",
			"type": "string"
		},
		{
			"key": "private_key_rsa3072",
			"value": "NULL",
			"type": "string"
		},
		{
			"key": "public_key_rsa3072",
			"value": "NULL",
			"type": "string"
		},
		{
			"key": "private_key_rsa4096",
			"value": "NULL",
			"type": "string"
		},
		{
			"key": "public_key_rsa4096",
			"value": "NULL",
			"type": "string"
		},
		{
			"key": "private_key_ecdsa_p256",
			"value": "NULL"
		},
		{
			"key": "public_key_ecdsa_p256",
			"value": "NULL"
		},
		{
			"key": "private_key_ecdsa_p384",
			"value": "NULL"
		},
		{
			"key": "public_key_ecdsa_p384",
			"value": "NULL"
		},
		{
			"key": "private_key_ecdsa_p512",
			"value": "NULL"
		},
		{
			"key": "public_key_ecdsa_p512",
			"value": "NULL"
		},
		{
			"key": "private_key_eddsa_ed25519",
			"value": "NULL"
		},
		{
			"key": "public_key_eddsa_ed25519",
			"value": "NULL"
		},
		{
			"key": "private_key_aes",
			"value": "NULL"
		},
		{
			"key": "external_mac_result",
			"value": "NULL"
		},
		{
			"key": "external_iv_result",
			"value": "NULL"
		},
		{
			"key": "external_ciphertext_result_0",
			"value": "NULL"
		},
		{
			"key": "external_ciphertext_result_1",
			"value": "NULL"
		},
		{
			"key": "external_decrypt_body",
			"value": "NULL"
		},
		{
			"key": "private_key_rsa2048_with_cert",
			"value": "NULL"
		},
		{
			"key": "public_key_rsa2048_with_cert",
			"value": "NULL"
		},
		{
			"key": "private_key_rsa3072_with_cert",
			"value": "NULL"
		},
		{
			"key": "public_key_rsa3072_with_cert",
			"value": "NULL"
		},
		{
			"key": "private_key_rsa4096_with_cert",
			"value": "NULL"
		},
		{
			"key": "public_key_rsa4096_with_cert",
			"value": "NULL"
		},
		{
			"key": "private_key_ecdsa_p256_with_cert",
			"value": "NULL"
		},
		{
			"key": "public_key_ecdsa_p256_with_cert",
			"value": "NULL"
		},
		{
			"key": "private_key_ecdsa_p384_with_cert",
			"value": "NULL"
		},
		{
			"key": "public_key_ecdsa_p384_with_cert",
			"value": "NULL"
		},
		{
			"key": "private_key_ecdsa_p512_with_cert",
			"value": "NULL"
		},
		{
			"key": "public_key_ecdsa_p512_with_cert",
			"value": "NULL"
		},
		{
			"key": "private_key_eddsa_ed25519_with_cert",
			"value": "NULL"
		},
		{
			"key": "public_key_eddsa_ed25519_with_cert",
			"value": "NULL"
		},
		{
			"key": "external_seal_cipher",
			"value": "NULL"
		},
		{
			"key": "external_tokenize_ciphertext_result_0",
			"value": "NULL"
		},
		{
			"key": "external_tokenize_ciphertext_result_1",
			"value": "NULL"
		},
		{
			"key": "external_signature",
			"value": ""
		},
		{
			"key": "external_detokenize_body",
			"value": ""
		},
		{
			"key": "mac_result",
			"value": ""
		},
		{
			"key": "mac_iv_result",
			"value": ""
		},
		{
			"key": "signature_result",
			"value": ""
		},
		{
			"key": "seal_cipher",
			"value": ""
		},
		{
			"key": "ciphertext_result_0",
			"value": ""
		},
		{
			"key": "ciphertext_result_1",
			"value": ""
		},
		{
			"key": "decrypt_body",
			"value": ""
		},
		{
			"key": "signed_certificate",
			"value": ""
		},
		{
			"key": "tokenize_ciphertext_result_0",
			"value": ""
		},
		{
			"key": "tokenize_ciphertext_result_1",
			"value": ""
		},
		{
			"key": "detokenize_body",
			"value": ""
		},
		{
			"key": "signature_scheme",
			"value": ""
		},
		{
			"key": "hash_algo",
			"value": ""
		},
		{
			"key": "sign_input_type",
			"value": ""
		},
		{
			"key": "tokenize_ciphertext_result_2",
			"value": ""
		},
		{
			"key": "tokenize_ciphertext_result_3",
			"value": ""
		},
		{
			"key": "tokenize_ciphertext_result_4",
			"value": ""
		},
		{
			"key": "external_tokenize_ciphertext_result_2",
			"value": ""
		},
		{
			"key": "external_tokenize_ciphertext_result_3",
			"value": ""
		},
		{
			"key": "external_tokenize_ciphertext_result_4",
			"value": ""
		}
	]
}