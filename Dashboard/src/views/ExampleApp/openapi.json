{
  "openapi": "3.0.0",
  "info": {
    "title": "POC_Sandhiguna",
    "description": "REST API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://backend.sandhiguna.com/",
      "description": "POC_Sandhiguna"
    }
  ],
  "paths": {
    "/agent/login": {
      "post": {
        "summary": "auth access for website",
        "tags": [
          "Agent"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "sessionToken": {
                              "type": "string",
                              "example": "lg16YIn5TVCEYZtgFaIm6MxV+3kMneSjm6zRL96xUBbrGYyTlxGhI2w41YCPqVb4PAV1WCVtUezn1KNwh9yKHzOxrYAOO+24zaV27dKZSLcwMC83Y4UeSjKrSIv9xUaKA++krx1//o4QEW/wHTq7ve/HnZA47zmCfxY7zxbFEIhM5SADqlh/rxUdkQ=="
                            },
                            "agentDN": {
                              "type": "string",
                              "example": "cn=keuangan1,dc=houseapp,dc=com"
                            },
                            "lasstUsedTime": {
                              "type": "integer",
                              "example": 1642623118
                            },
                            "idleTimeoutInMins": {
                              "type": "integer",
                              "example": 15
                            },
                            "expiredAt": {
                              "type": "integer",
                              "example": 1643623118
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fault": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "fail"
          }
        }
      }
    },
    "/Refresh-Session": {
      "post": {
        "summary": "Token for refresh session in login website",
        "tags": [
          "Agent"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReSession"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "sessionToken": {
                              "type": "string",
                              "example": "lg16YIn5TVCEYZtgFaIm6MxV+3kMneSjm6zRL96xUBbrGYyTlxGhI2w41YCPqVb4PAV1WCVtUezn1KNwh9yKHzOxrYAOO+24zaV27dKZSLcwMC83Y4UeSjKrSIv9xUaKA++krx1//o4QEW/wHTq7ve/HnZA47zmCfxY7zxbFEIhM5SADqlh/rxUdkQ=="
                            },
                            "agentDN": {
                              "type": "string",
                              "example": "cn=keuangan1,dc=houseapp,dc=com"
                            },
                            "lasstUsedTime": {
                              "type": "integer",
                              "example": 1642623118
                            },
                            "idleTimeoutInMins": {
                              "type": "integer",
                              "example": 15
                            },
                            "expiredAt": {
                              "type": "integer",
                              "example": 1643623118
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fault": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cmac/generate": {
      "post": {
        "summary": "generate cmac",
        "tags": [
          "Mac"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CmGenerate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success generate cmac",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResCmHmSh256"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cmac/Verify": {
      "post": {
        "summary": "Verify cmac",
        "tags": [
          "Mac"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CmVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success Verify cmac",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Veri"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hmac/Generate": {
      "post": {
        "summary": "Generate hmac",
        "tags": [
          "Mac"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HmGenerate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success Generate hmac",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResCmHmSh256"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hmac/Verify": {
      "post": {
        "summary": "Verify hmac",
        "tags": [
          "Mac"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HmVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success Verify hmac",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Veri"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gmac/Generate": {
      "post": {
        "summary": "Generate gmac",
        "tags": [
          "Mac"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GmGenerate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success Generate gmac",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "mac": {
                          "type": "string"
                        },
                        "iv": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "mac": "I2w41YCPqVb4PAV1WCVtUezn1KNwh9",
                    "iv": "rGYyTlxGhI2w41YCPqV=="
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gmac/Verify": {
      "post": {
        "summary": "Verify gmac",
        "tags": [
          "Mac"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GmVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success Verify gmac",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Veri"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Sign_With_RSA_2048": {
      "post": {
        "summary": "Sign data with RSA 2048",
        "tags": [
          "Sign"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SRSA2048"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResSign"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Verify_With_RSA_2048": {
      "post": {
        "summary": "Verify signature with RSA 2048",
        "tags": [
          "Sign"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VRSA2048"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success verify signature",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Veri"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Sign_With_RSA_3072": {
      "post": {
        "summary": "Sign data with RSA 3072",
        "tags": [
          "Sign"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SRSA3072"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResSign"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Verify_With_RSA_3072": {
      "post": {
        "summary": "Verify signature with RSA 3072",
        "tags": [
          "Sign"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VRSA3072"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success verify signature",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Veri"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Sign_With_RSA_4096": {
      "post": {
        "summary": "Sign data with RSA 4096",
        "tags": [
          "Sign"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SRSA4096"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResSign"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Verify_With_RSA_4096": {
      "post": {
        "summary": "Verify signature with RSA 4096",
        "tags": [
          "Sign"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VRSA4096"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success verify signature",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Veri"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Sign_With_ECDSA_P256": {
      "post": {
        "summary": "Sign data with ECDSA P256",
        "tags": [
          "Sign"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SECDSA-P256"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success sign data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResSign"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Verify_With_ECDSA_P256": {
      "post": {
        "summary": "Verify signature with ECDSA P256",
        "tags": [
          "Sign"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VECDSA-P256"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success verify signature",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Veri"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/symmetric-Key_Seal_with_AES": {
      "post": {
        "summary": "symmetric key seal AES",
        "tags": [
          "Seal and Unseal"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/seal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success seal AES",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResSeal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/symmetric-Key_Unseal_with_AES": {
      "post": {
        "summary": "symmetric key unseal AES",
        "tags": [
          "Seal and Unseal"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unseal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success unseal AES",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResUnseal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Assymmetric-Key_seal_with_RSA_2048": {
      "post": {
        "summary": "Assymmetric key seal 2048",
        "tags": [
          "Seal and Unseal"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/seal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success seal RSA 2048",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResSeal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Assymmetric-Key_unseal_with_RSA_2048": {
      "post": {
        "summary": "Assymmetric key unseal RSA 2048",
        "tags": [
          "Seal and Unseal"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unseal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success unseal RSA 2048",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResUnseal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Assymmetric-Key_seal_with_RSA_3072": {
      "post": {
        "summary": "Assymmetric key seal 3072",
        "tags": [
          "Seal and Unseal"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/seal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success seal RSA 3072",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResSeal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Assymmetric-Key_unseal_with_RSA_3072": {
      "post": {
        "summary": "Assymmetric key unseal RSA 3072",
        "tags": [
          "Seal and Unseal"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unseal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success unseal RSA 3072",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResUnseal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Assymmetric-Key_seal_with_RSA_4096": {
      "post": {
        "summary": "Assymmetric key seal 4096",
        "tags": [
          "Seal and Unseal"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/seal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success seal RSA_4096",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResSeal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Assymmetric-Key_unseal_with_RSA 4096": {
      "post": {
        "summary": "Assymmetric key unseal RSA 4096",
        "tags": [
          "Seal and Unseal"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unseal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success unseal RSA 4096",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResUnseal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/encrypt": {
      "post": {
        "summary": "Encrypt data",
        "tags": [
          "encrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Encrypt"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data success to encrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "object",
                          "properties": {
                            "keyVersion": {
                              "type": "integer"
                            },
                            "ciphertext": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "text": {
                                    "type": "string"
                                  },
                                  "mac": {
                                    "type": "string"
                                  },
                                  "iv": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "keyVersion": 3,
                    "ciphertext": [
                      {
                        "text": "j1XAcRImCh3ehdMmyak6n0ZXpVHZ05Q8/tQPqDATDNhIA==",
                        "mac": "8/tQPqDATDNhIA==",
                        "iv": "lfnugylknwfyefbwfp"
                      },
                      {
                        "text": "aHjd86AcRIdnawehdMmyafej77baVHZ05Q8/thdyIfTDN==",
                        "mac": "ks9gb74/abdjbf==",
                        "iv": "lfegwefirgureoepwk"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/decrypt": {
      "post": {
        "summary": "Decrypt data",
        "tags": [
          "decrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Decrypt"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data success to decrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResDec"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/encrypt_with_RSA_2048": {
      "post": {
        "summary": "Encrypt data RSA 2048",
        "tags": [
          "encrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnRSA"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data success to encrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResRSA"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/decrypt_with_RSA_2048": {
      "post": {
        "summary": "Decrypt data RSA 2048",
        "tags": [
          "decrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeRSA"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data success to decrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResDec"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/encrypt_with_RSA_3072": {
      "post": {
        "summary": "Encrypt data RSA 3072",
        "tags": [
          "encrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnRSA"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data success to encrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResRSA"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/decrypt_with_RSA_3072": {
      "post": {
        "summary": "Decrypt data RSA 3072",
        "tags": [
          "decrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeRSA"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data success to decrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResDec"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/encrypt_with_RSA_4096": {
      "post": {
        "summary": "Encrypt data RSA 4096",
        "tags": [
          "encrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnRSA"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data success to encrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResRSA"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/decrypt_with_RSA_4096": {
      "post": {
        "summary": "Decrypt data RSA 4096",
        "tags": [
          "decrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeRSA"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data success to decrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResDec"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/encrypt_with_RSA_2048_with_session_key": {
      "post": {
        "summary": "Encrypt data RSA 2048 use session key",
        "tags": [
          "encrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnRSASK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data success to encrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResRSASK"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/decrypt_with_RSA_2048_with_session_key": {
      "post": {
        "summary": "Decrypt data RSA 2048 use session key",
        "tags": [
          "decrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeRSASK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data success to decrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResDec"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/encrypt_with_RSA_3072_with_session_key": {
      "post": {
        "summary": "Encrypt data RSA 3072 use session key",
        "tags": [
          "encrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnRSASK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data success to encrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResRSASK"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/decrypt_with_RSA_3072_with_session_key": {
      "post": {
        "summary": "Decrypt data RSA 3072 use session key",
        "tags": [
          "decrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeRSASK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data success to decrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResDec"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/encrypt_with_RSA_4096_with_session_key": {
      "post": {
        "summary": "Encrypt data RSA 4096 use session key",
        "tags": [
          "encrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnRSASK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data success to encrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResRSASK"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/decrypt_with_RSA_4096_with_session_key": {
      "post": {
        "summary": "Decrypt data RSA 4096 use session key",
        "tags": [
          "decrypt"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeRSASK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data success to decrypt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResDec"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/certificate_signing_with_ECDSA-P256": {
      "post": {
        "summary": "Sign a Certificate Signing Request with ECDSA-P256",
        "tags": [
          "Certificate signing and verify"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CeSign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certificate signing request success to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResCeSign"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/certificate_verify_with_ECDSA-P256": {
      "post": {
        "summary": "Sign a Certificate Signing Request with ECDSA-P256",
        "tags": [
          "Certificate signing and verify"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CeVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certificate success to verification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Veri"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/certificate_signing_with_RSA_3072": {
      "post": {
        "summary": "Sign a Certificate Signing Request with RSA_3072",
        "tags": [
          "Certificate signing and verify"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CeSign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certificate signing request success to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResCeSign"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/certificate_verify_with_RSA_3072": {
      "post": {
        "summary": "Sign a Certificate Signing Request with RSA_3072",
        "tags": [
          "Certificate signing and verify"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CeVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certificate success to verification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Veri"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/certificate_signing_with_RSA_4096": {
      "post": {
        "summary": "Sign a Certificate Signing Request with RSA_4096",
        "tags": [
          "Certificate signing and verify"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CeSign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certificate signing request success to sign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResCeSign"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/certificate_verify_with_RSA_4096": {
      "post": {
        "summary": "Sign a Certificate Signing Request with RSA_4096",
        "tags": [
          "Certificate signing and verify"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CeVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certificate success to verification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plaintext": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Veri"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secret/get": {
      "post": {
        "summary": "used to retrieve the secret from the specified slot using the secret ID.",
        "tags": [
          "v1.0"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeGet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "secretId": {
                          "type": "string"
                        },
                        "secretLabel": {
                          "type": "string"
                        },
                        "secretData": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "secretId": "PasswordDBKeuangan1",
                    "secretLabel": "Password to access keuangan database",
                    "secretData": "la(084KYan%"
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tokenize": {
      "post": {
        "summary": "used to tokenize plaintext data using a specified key.",
        "tags": [
          "v1.0"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tokenize"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "ciphertext": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "type": "string"
                              },
                              "metadata": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "ciphertext": [
                      {
                        "token": "A(Z= 5790 7311 QA-I",
                        "metadata": "8/tQPqDATDNhIA=="
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/detokenize": {
      "post": {
        "summary": "used to detokenize ciphertext data using a specified key.",
        "tags": [
          "v1.0"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Detokenize"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "plaintext": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "plaintext": [
                      "4281 5790 7311 2819"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/random_number_generator": {
      "post": {
        "summary": "used to generate random numbers of desired length using the given slot ID.",
        "tags": [
          "v1.0"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RNG"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "random": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": [
                    {
                      "random": "1,231,255,98,65,77,81,32"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/key_info": {
      "post": {
        "summary": "used to retrieve key related information using the specified `keyId` and `slotId`.",
        "tags": [
          "v1.0"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/keyinfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "slotId": {
                          "type": "integer"
                        },
                        "keyId": {
                          "type": "string"
                        },
                        "keyLabel": {
                          "type": "string"
                        },
                        "keyAlgo": {
                          "type": "string"
                        },
                        "keyLength": {
                          "type": "integer"
                        },
                        "keyPurpose": {
                          "type": "string"
                        },
                        "keyVersion": {
                          "type": "integer"
                        },
                        "isExtractable": {
                          "type": "string"
                        },
                        "isRotatable": {
                          "type": "string"
                        },
                        "publicKey": {
                          "type": "string"
                        },
                        "certificate": {
                          "type": "string"
                        },
                        "creationDate": {
                          "type": "integer"
                        },
                        "expiryDate": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                    "slotId": 1,
                    "keyId": "01-Finance",
                    "keyLabel": "Finance",
                    "keyAlgo": "AESSecretKey",
                    "keyLength": 256,
                    "keyPurpose": "Encryption",
                    "keyVersion": 1,
                    "isExtractable": "YES",
                    "isRotatable": "Automatic Rotatable",
                    "publicKey": "-----BEGIN PUBLIC KEY----- MIIBigKCAYEAtTgJkzcjC4n1zLnnQ0VaXt4PCCjqHgya1w6OBvvg3RKunIp7CZSi gDD8M9Rf+LwdZ3FDZH8YKoepqPJD2FgiP7SICmRRRXIj/KNRgfk8vkqBAlAidUPk iPDsyPUrWHfzhoM+2W97QGG52jheJIVFNHxGlk/2TTSEh8BdZurcopGP7H2hOUp+ 7mVgpdYMdm29kFXC9qkKZ7qxR4qIAPW2587Woxc6mEwGSJED4LR1vpvJUtYJEON6 cW3ttcYTVebtphvjFSugWR3uJyO4r52JCJfENYSJYqSAyx2+1fu1TRXT0viZnKwf KIA2UZohG8kZELWj7LnSbBGWaZGgQnDzicBt8DnifDCRyeQFhWl/BelNChXhsVHh MpUJ+bSK7q2ByLuYk74TfSaVniJrVbulvhVEzaxTPD/Ve+uhifCjyhKP4Ta/V1Ag 8E6rxivoxMG+e17SQXkGgOwNw7EwvThZn/KVc3bIGOpwnJdrVPeTfl5gtcPQlbQA ev6pZbnmyRRjAgMBAAE= -----END PUBLIC KEY-----",
                    "certificate": "-----BEGIN CERTIFICATE----- MIIEcjCCAtoCAQAwDQYJKoZIhvcNAQELBQAwaTEcMBoGA1UEAwwTbGNldi5zYW5k aGlndW5hLmNvbTEL MAkGA1UEBhMCSUQxFzAVBgNVBAgMDktlcHVsYXVhbiBSaWF1 MQ4wDAYDVQQHDAVCYXRhbTETMBEGA1UE CgwKU2FuZGhpZ3VuYTAeFw0yMjA5MjAw ODExMTVaFw0yMzA5MjAwODExMTVaMIGUMQswCQYDVQQGEwJJRDEOMAwGA1UECAwF S2VwcmkxDjAMBgNVBAcMBUJhdGFtMRMwEQYDVQQKDApTYW5kaGlndW5hMQwwCgYD VQQLDANFbmcxHTAbBgNVBAMMFHRlc3QyLnNhbmRoaWd1bmEuY29tMSMwIQYJKoZI hvcNAQkBFhR0ZXN0MkBzYW5kaGlndW5hLmNvbTCCAaIwDQYJKoZIhvcNAQEBBQAD ggGPADCCAYoCggGBAMhpEdvZewayMOzoQmsRpOzNHFmy4v+BFMtXWk03tNXo2dk0 pFnU7IMlqsaKnRUhKo26Nxs82k3NgCz1FLwyoL4uCGoF6W0fJ7VtrbtW0yJZjYXd GHb7lPeXeu3j7HtIqQehdFQisdzs3DNeTbRF4spdPIHQoX7OF9LCYbzdaQMCeuJb ojk5ScMr2omGxbG/pm5TNbO6hdQk2jYO79PlovZKZRG6NpZ7bXi7jwKFoCQUZT/elK+YDsa4Vi9hGsEv6aYPuwdiUulQppIbIagiv+A9TcDuPjgerS2IJAktCHt7HqDR m8wJ1irP3qQcV3KfIgADchbnPFxehZMht1iwZLNHWMnWwIRwcptl39VMiNQxheiK OW15yxHEcWikrwB4I5Z/ph88CDNJskC1pJYNcmfEzq7jealTIFQrfAjN3bxo7qe+ KR0JQ55f8HF6AhMcvYkZ5FHIACYQJP9WvLQgq9dMVmiDnVf7owIuWnS/lqc65+Z7 +PJBGnaqtQopDz0N+QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBgQBxj/0bs3i+SXmY o0EMqjrSVQi4l6CHL1B1TByG2Hq8t7XkJ8BjSlrYBPQpPvMvTN1IlWWvs9JBoco4 r8TxEP78+rC/J3NU0URfseN7pGhXg30714s8ew7ly+ZtfNERM1SIXqhXGdKcY8fj Uq21QbtvhtdOCJDv+XImHjVHwinc4U5i0ebIpVb+uJFDkkVjmM0tDFctlhFv3es+ MqOjwA2dshptu5QAtISpFtNxqLQISudGiIQ6g2FYyWy/PPwDzT+IU4wLArF2ZfJY rbhOaG64CEfhlY7+EYYcqS3laqXhRlHI3kqbes4PAvOe/JqHz52RcUb3vIiLieIu oVbFnCnFUpstGT1gt5URlv73jXUHPye0AW+v/6/3HeR0HoNljXtD1phtn01bFEpe x6CcNQVVw/vxQ7MlsUiFWfJPhFz6oafmUEKCubI8XCmHJ/upksJ3CK/HukPLURLN yFacfjAN6L5mUq52o74OxLVKqJ5J2XpgSEfnnclijzKkWKYZnx0= -----END CERTIFICATE-----",
                    "creationDate": 1666833972,
                    "expiryDate": 1669512391
                  }
                }
              }
            }
          },
          "400": {
            "description": "fail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fail"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "fail": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 0
                }
              }
            }
          }
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot to be used for login",
            "example": "(slot_id)"
          },
          "password": {
            "type": "string",
            "description": "The password or PIN for the agent this slot",
            "example": "(agent_password)"
          }
        },
        "required": [
          "slotId",
          "password"
        ]
      },
      "ReSession": {
        "type": "object",
        "properties": {
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot for which to refresh the session",
            "example": "(slot_id)"
          },
          "sessionToken": {
            "type": "string",
            "description": "The current session token of the agent",
            "example": "(session_token)"
          }
        },
        "required": [
          "slotId",
          "sessionToken"
        ]
      },
      "CmGenerate": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for generating the MAC",
            "example": "(key_id)"
          },
          "hashAlgo": {
            "type": "string",
            "example": "CMAC"
          },
          "data": {
            "type": "string",
            "description": "The data for which the MAC will be generated",
            "example": "(mac_data)"
          }
        },
        "required": [
          "slotId",
          "sessionToken",
          "keyId",
          "data"
        ]
      },
      "ResCmHmSh256": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "mac": {
                "type": "string"
              }
            },
            "example": {
              "result": {
                "mac": "bfe8YRkr0qk2lfIdhTng732rfoejf0"
              }
            }
          }
        }
      },
      "Veri": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "verified": {
                "type": "boolean"
              }
            },
            "example": {
              "result": {
                "verified": true
              }
            }
          }
        }
      },
      "CmVerify": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for generating the MAC",
            "example": "(key_id)"
          },
          "hashAlgo": {
            "type": "string",
            "example": "CMAC"
          },
          "data": {
            "type": "string",
            "description": "The data for which the MAC will be generated",
            "example": "(mac_data)"
          },
          "mac": {
            "type": "string",
            "description": "The Base64 URL-safe encoded MAC to verify",
            "example": "(base64_mac)"
          }
        },
        "required": [
          "slotId",
          "sessionToken",
          "keyId",
          "data",
          "mac"
        ]
      },
      "HmGenerate": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for generating the MAC",
            "example": "(key_id)"
          },
          "hashAlgo": {
            "type": "string",
            "example": "HMAC-SHA256"
          },
          "data": {
            "type": "string",
            "description": "The data for which the MAC will be generated",
            "example": "(mac_data)"
          }
        },
        "required": [
          "slotId",
          "sessionToken",
          "keyId",
          "data"
        ]
      },
      "HmVerify": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for generating the MAC",
            "example": "(key_id)"
          },
          "hashAlgo": {
            "type": "string",
            "example": "HMAC-SHA256"
          },
          "data": {
            "type": "string",
            "description": "The data for which the MAC will be generated",
            "example": "(mac_data)"
          },
          "mac": {
            "type": "string",
            "description": "The Base64 URL-safe encoded MAC to verify",
            "example": "(base64_mac)"
          }
        },
        "required": [
          "slotId",
          "sessionToken",
          "keyId",
          "data",
          "mac"
        ]
      },
      "GmGenerate": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for generating the MAC",
            "example": "(key_id)"
          },
          "hashAlgo": {
            "type": "string",
            "example": "GMAC-256"
          },
          "data": {
            "type": "string",
            "description": "The data for which the MAC will be generated",
            "example": "(mac_data)"
          }
        },
        "required": [
          "slotId",
          "sessionToken",
          "keyId",
          "data"
        ]
      },
      "GmVerify": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for generating the MAC",
            "example": "(key_id)"
          },
          "hashAlgo": {
            "type": "string",
            "example": "GMAC-256"
          },
          "data": {
            "type": "string",
            "description": "The data for which the MAC will be generated",
            "example": "(mac_data)"
          },
          "mac": {
            "type": "string",
            "description": "The Base64 URL-safe encoded MAC to verify",
            "example": "(base64_mac)"
          },
          "iv": {
            "type": "string",
            "description": "The initialization vector, required for GMAC hash algorithm",
            "example": "(initialization_vector)"
          }
        },
        "required": [
          "slotId",
          "sessionToken",
          "keyId",
          "data",
          "mac",
          "iv"
        ]
      },
      "ResSign": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "signature": {
                "type": "string"
              }
            },
            "example": {
              "result": {
                "signature": "LKAJDIAOJS=="
              }
            }
          }
        }
      },
      "SRSA2048": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the private key used for signing",
            "example": "(private_key_id)"
          },
          "data": {
            "type": "string",
            "description": "The data to be signed",
            "example": "(data_to_sign)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data"
        ]
      },
      "VRSA2048": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the public key used for signature verification",
            "example": "(public_key_id)"
          },
          "data": {
            "type": "string",
            "description": "The original data that was signed",
            "example": "(original_data)"
          },
          "signature": {
            "type": "string",
            "description": "The digital signature in Base64 format to verify",
            "example": "(base64_signature)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data",
          "signature"
        ]
      },
      "SRSA3072": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the public key used for signature verification",
            "example": "(private_key_id)"
          },
          "data": {
            "type": "string",
            "description": "The original data that was signed",
            "example": "(original_data)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data"
        ]
      },
      "VRSA3072": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the public key used for signature verification",
            "example": "(public_key_id)"
          },
          "data": {
            "type": "string",
            "description": "The original data that was signed",
            "example": "(original_data)"
          },
          "signature": {
            "type": "string",
            "description": "The digital signature in Base64 format to verify",
            "example": "(base64_signature)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data",
          "signature"
        ]
      },
      "SRSA4096": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the public key used for signature verification",
            "example": "(private_key_id)"
          },
          "data": {
            "type": "string",
            "description": "The original data that was signed",
            "example": "(original_data)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data"
        ]
      },
      "VRSA4096": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the public key used for signature verification",
            "example": "(public_key_id)"
          },
          "data": {
            "type": "string",
            "description": "The original data that was signed",
            "example": "(original_data)"
          },
          "signature": {
            "type": "string",
            "description": "The digital signature in Base64 format to verify",
            "example": "(base64_signature)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data",
          "signature"
        ]
      },
      "SECDSA-P256": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the public key used for signature verification",
            "example": "(private_key_id)"
          },
          "data": {
            "type": "string",
            "description": "The original data that was signed",
            "example": "(original_data)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data"
        ]
      },
      "VECDSA-P256": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the public key used for signature verification",
            "example": "(public_key_id)"
          },
          "data": {
            "type": "string",
            "description": "The original data that was signed",
            "example": "(original_data)"
          },
          "signature": {
            "type": "string",
            "description": "The digital signature in Base64 format to verify",
            "example": "(base64_signature)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data",
          "signature"
        ]
      },
      "ResSeal": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "ciphertext": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "example": {
              "result": {
                "ciphertext": [
                  "e206IOKAnGoxWEFjUkltQ2g1ZGhORm1qV2s3aUlXOWpER01oaGxsS1F6eExhb3lOZz3igJ0sIGM6IOKAnGoxWEFjUkltQ2gzZWhkTW15YWs2bjBaWHBWSFowNVE4L3RRUHFEQVRETmhJQT094oCdfQo=",
                  "eyJtIjoiRnBlcGVoNHM5VEIwUUdJRC9aMG9IMUZIcVYzSExVQ25NMlUyU2o1bGdNOD0iLCJjIjoibWsrNDhrRHQrTFU5amhDR0RaQmhTWkt4K1FQS0h2b1haSkF6cVM1b1FnZzA3WmdhOU56MThRPT0ifQ=="
                ]
              }
            }
          }
        }
      },
      "ResUnseal": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "plaintext": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "example": {
              "result": {
                "plaintext": [
                  "Plaintext1",
                  "Plaintext2"
                ]
              }
            }
          }
        }
      },
      "seal": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot used for encryption",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for sealing the plaintext",
            "example": "(key_id)"
          },
          "plaintext": {
            "type": "array",
            "description": "Maximum length is 700 KB.",
            "items": {
              "type": "object",
              "properties": {
                "plaintext1": {
                  "type": "string"
                },
                "plaintext2": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data",
          "plaintext"
        ]
      },
      "unseal": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot used for decryption",
            "example": "(slot_id)"
          },
          "ciphertext": {
            "type": "array",
            "description": "The ciphertext is a JSON object Base64 URL safe encoded string containing encrypted metadata and ciphertext.",
            "items": {
              "type": "object",
              "properties": {
                "ciphertext1": {
                  "type": "string"
                },
                "ciphertext2": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "data",
          "ciphertext"
        ]
      },
      "Encrypt": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the encryption request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for encryption (AES-256-GCM or RSA)",
            "example": "(key_id)"
          },
          "plaintext": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "text"
              ],
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The plaintext data to be encrypted",
                  "example": "(text_1)"
                },
                "aad": {
                  "type": "string",
                  "description": "Optional: Additional Authentication Data (AAD) for AES-GCM to ensure integrity",
                  "example": "(additional_auth_data_1)"
                }
              }
            }
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "plaintext"
        ]
      },
      "Decrypt": {
        "type": "object",
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "ciphertext"
        ],
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot used for decryption",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for decryption",
            "example": "(key_id)"
          },
          "ciphertext": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "text",
                "mac",
                "iv",
                "keyVersion"
              ],
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The ciphertext to be decrypted",
                  "example": "(ciphertext_value_1)"
                },
                "aad": {
                  "type": "string",
                  "description": "Optional: The additional authentication data used during encryption",
                  "example": "(ciphertext_aad_1)"
                },
                "mac": {
                  "type": "string",
                  "description": "The MAC (Message Authentication Code) to verify the integrity of the ciphertext",
                  "example": "(ciphertext_mac_1)"
                },
                "iv": {
                  "type": "string",
                  "description": "The Initialization Vector (IV) used for encryption",
                  "example": "(ciphertext_iv_1)"
                },
                "keyVersion": {
                  "type": "string",
                  "description": "The version of the key used for decryption",
                  "example": "(key_version_1)"
                }
              }
            }
          }
        }
      },
      "ResRSA": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "ciphertext": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "result": {
                      "ciphertext": [
                        {
                          "text": "j1XAcRImCh3ehdMmyak6n0ZXpVHZre7847tqdoqjwr9u23HUjo3roi05Q8/tQPqDATDNhIA=="
                        },
                        {
                          "text": "aHjd86AcRIdnawehdMmyafej77baVHZ05Q8/thdyIfTDN=="
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ResRSASK": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "ciphertext": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string"
                    },
                    "mac": {
                      "type": "string"
                    },
                    "iv": {
                      "type": "string"
                    },
                    "wrappedSessionKey": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "example": {
              "result": {
                "ciphertext": [
                  {
                    "text": "ewfN7ebgf4t340rind92ueT1mNDodu3YSm/bDof034fj==",
                    "mac": "eFio5tjRhP4dui==",
                    "iv": "assadajajrweoirjew",
                    "wrappedSessionKey": "baef7HVn7bS9ejbd9==d8dnklwAhd8aGTuiaf7te93nf"
                  },
                  {
                    "text": "vRjnf8743nwF92ew9DJ32nfiFn4ubg84hf85hg/hg34h==",
                    "mac": "mdJHbip5dbao9P==",
                    "iv": "saajfhfefeafjjfbkf",
                    "wrappedSessionKey": "fge7U835Yhdh98Qejid9q3rILiorkAYry6ef4u34fsk9"
                  }
                ]
              }
            }
          }
        }
      },
      "ResDec": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string"
          },
          "slotId": {
            "type": "integer"
          },
          "keyId": {
            "type": "string"
          },
          "plaintext": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string"
                },
                "aad": {
                  "type": "string"
                },
                "mac": {
                  "type": "string"
                },
                "iv": {
                  "type": "string"
                },
                "keyVersion": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "example": {
          "sessionToken": "abcd1234",
          "slotId": "slot_5678",
          "keyId": "key_9876",
          "plaintext": [
            {
              "text": "SensitiveDataExample1",
              "aad": "auth_data_1",
              "mac": "mac_data_example_1",
              "iv": "initial_vector_1",
              "keyVersion": 1
            },
            {
              "text": "SensitiveDataExample2",
              "aad": "auth_data_2",
              "mac": "mac_data_example_2",
              "iv": "initial_vector_2",
              "keyVersion": 2
            }
          ]
        }
      },
      "EnRSA": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the encryption request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for encryption (AES-256-GCM or RSA)",
            "example": "(key_id)"
          },
          "plaintext": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "text"
              ],
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The plaintext data to be encrypted",
                  "example": "(text_1)"
                }
              }
            }
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "plaintext"
        ]
      },
      "DeRSA": {
        "type": "object",
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "ciphertext"
        ],
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot used for decryption",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for decryption",
            "example": "(key_id)"
          },
          "ciphertext": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "text",
                "mac",
                "iv",
                "keyVersion"
              ],
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The ciphertext to be decrypted",
                  "example": "(ciphertext_value_1)"
                },
                "mac": {
                  "type": "string",
                  "description": "The MAC (Message Authentication Code) to verify the integrity of the ciphertext",
                  "example": "(ciphertext_mac_1)"
                },
                "iv": {
                  "type": "string",
                  "description": "The Initialization Vector (IV) used for encryption",
                  "example": "(ciphertext_iv_1)"
                },
                "keyVersion": {
                  "type": "string",
                  "description": "The version of the key used for decryption",
                  "example": "(key_version_1)"
                }
              }
            }
          }
        }
      },
      "EnRSASK": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the encryption request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for encryption (AES-256-GCM or RSA)",
            "example": "(key_id)"
          },
          "useSessionKey": {
            "type": "string",
            "description": "Boolean flag, true if a session key should be used for encryption (applicable for RSA)",
            "example": "(use_session_key)"
          },
          "plaintext": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "text"
              ],
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The plaintext data to be encrypted",
                  "example": "(text_1)"
                }
              }
            }
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "plaintext",
          "useSessionKey"
        ]
      },
      "DeRSASK": {
        "type": "object",
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "ciphertext",
          "useSessionKey"
        ],
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot used for decryption",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for decryption",
            "example": "(key_id)"
          },
          "useSessionKey": {
            "type": "string",
            "description": "Boolean flag, true if a session key should be used for encryption (applicable for RSA)",
            "example": "(use_session_key)"
          },
          "ciphertext": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "text",
                "mac",
                "iv",
                "keyVersion"
              ],
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The ciphertext to be decrypted",
                  "example": "(ciphertext_value_1)"
                },
                "mac": {
                  "type": "string",
                  "description": "The MAC (Message Authentication Code) to verify the integrity of the ciphertext",
                  "example": "(ciphertext_mac_1)"
                },
                "iv": {
                  "type": "string",
                  "description": "The Initialization Vector (IV) used for encryption",
                  "example": "(ciphertext_iv_1)"
                },
                "keyVersion": {
                  "type": "string",
                  "description": "The version of the key used for decryption",
                  "example": "(key_version_1)"
                }
              }
            }
          }
        }
      },
      "ResCeSign": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "certificate": {
                "type": "string"
              }
            },
            "example": {
              "result": {
                "certificate": "-----BEGIN CERTIFICATE-----MIIEcjCCAtoCAQAwDQYJKoZIhvcNAQELBQAwaTEcMBoGA1UEAwwTbGNldi5zYW5kaGlndW5hLmNvbTELMAkGA1UEBhMCSUQxFzAVBgNVBAgMDktlcHVsYXVhbiBSaWF1MQ4wDAYDVQQHDAVCYXRhbTETMBEGA1UECgwKU2FuZGhpZ3VuYTAeFw0yMjA5MjAwODExMTVaFw0yMzA5MjAwODExMTVaMIGUMQswCQYDVQQGEwJJRDEOMAwGA1UECAwFS2Vwcml4DjAMBgNVBAcMBUJhdGFtMRMwEQYDVQQKDApTYW5kaGlndW5hMQwwCgYDVQQLDANFbmcxHTAbBgNVBAMMFHRlc3QyLnNhbmRoaWd1bmEuY29tMSMwIQYJKoZIhvcNAQkBFhR0ZXN0MkBzYW5kaGlndW5hLmNvbTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAMhpEdvZewayMOzoQmsRpOzNHFmy4v+BFMtXWk03tNXo2dk0pFnU7IMlqsaKnRUhKo26Nxs82k3NgCz1FLwyoL4uCGoF6W0fJ7VtrbtW0yJZjYXdGHb7lPeXeu3j7HtIqQehdFQisdzs3DNeTbRF4spdPIHQoX7OF9LCYbzdaQMCeuJbojk5ScMr2omGxbG/pm5TNbO6hdQk2jYO79PlovZKZRG6NpZ7bXi7jwKFoCQUZT/elK+YDsa4Vi9hGsEv6aYPuwdiUulQppIbIagiv+A9TcDuPjgerS2IJAktCHt7HqDRm8wJ1irP3qQcV3KfIgADchbnPFxehZM-----END CERTIFICATE-----"
              }
            }
          }
        }
      },
      "CeSign": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot used for signing the CSR",
            "example": "(slot_id)"
          },
          "validityPeriod": {
            "type": "integer",
            "description": "The validity period of the certificate in days",
            "example": "(validity_period)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the private key used for signing",
            "example": "(key_id)"
          },
          "csr": {
            "type": "string",
            "description": "The CSR in PEM format to be signed",
            "example": "(certificate_signing_request)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "validityPeriod",
          "keyId",
          "csr"
        ]
      },
      "CeVerify": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the verification request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the public key used for verifying the certificate",
            "example": "(key_id)"
          },
          "certificate": {
            "type": "string",
            "description": "The signed certificate in PEM format to be verified",
            "example": "(signed_certificate)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "certificate"
        ]
      },
      "SeGet": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot from which to retrieve the secret",
            "example": "(slot_id)"
          },
          "secredId": {
            "type": "string",
            "description": "The ID of the secret to be retrieved",
            "example": "(secret_id)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "secretId"
        ]
      },
      "Tokenize": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the tokenization request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for tokenization",
            "example": "(key_id)"
          },
          "plaintext": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "text",
                "formatChar"
              ],
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The plaintext data to be tokenized",
                  "example": "(text)"
                },
                "formatChar": {
                  "type": "string",
                  "description": "Optional: Format-preserving characters to maintain original text structure (e.g., preserving length/format of credit card numbers)",
                  "example": "(format_char)"
                }
              }
            }
          }
        }
      },
      "Detokenize": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the detokenization request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key used for detokenization",
            "example": "(key_id)"
          },
          "ciphertext": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "token",
                "formatChar"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "The tokenized value to be detokenized",
                  "example": "(token)"
                },
                "formatChar": {
                  "type": "string",
                  "description": "Metadata associated with the tokenization process (e.g., version of the key used)",
                  "example": "(metadata)"
                }
              }
            }
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "ciphertext"
        ]
      },
      "RNG": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot requesting the random number",
            "example": "(slot_id)"
          },
          "length": {
            "type": "integer",
            "description": "The desired length of the generated random number",
            "example": "(output_length)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "length"
        ]
      },
      "keyinfo": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token for authentication",
            "example": "(session_token)"
          },
          "slotId": {
            "type": "integer",
            "description": "The ID of the slot associated with the key info request",
            "example": "(slot_id)"
          },
          "keyId": {
            "type": "string",
            "description": "The ID of the key whose info is being requested",
            "example": "(key_id)"
          },
          "keyVersion": {
            "type": "integer",
            "description": "The version of the key being retrieved (optional for RSA keys)",
            "example": "(key_version)"
          }
        },
        "required": [
          "sessionToken",
          "slotId",
          "keyId",
          "keyVersion"
        ]
      }
    }
  }
}